Ext.data.JsonP.Kevlar_Model({"singleton":false,"statics":{"cfg":[],"property":[],"css_var":[],"event":[],"css_mixin":[],"method":[]},"files":[{"filename":"Model.js","href":"Model.html#Kevlar-Model"}],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'><a href='#!/api/Kevlar.util.Observable' rel='Kevlar.util.Observable' class='docClass'>Kevlar.util.Observable</a><div class='subclass '><strong>Kevlar.Model</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/Model.html#Kevlar-Model' target='_blank'>Model.js</a></div></pre><div class='doc-contents'><p>Generalized data storage class, which has a number of data-related features, including the ability to persist the data to a backend server.\nBasically, a Model represents some object of data that your application uses. For example, in an online store, one might define two Models:\none for Users, and the other for Products. These would be <code>User</code> and <code>Product</code> models, respectively. Each of these Models would in turn,\nhave the <a href=\"#!/api/Kevlar.Attribute\" rel=\"Kevlar.Attribute\" class=\"docClass\">Attributes</a> (data values) that each Model is made up of. Ex: A User model may have: <code>userId</code>, <code>firstName</code>, and\n<code>lastName</code> Attributes.</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-cfg'>Config options</h3><div class='subsection'><div id='cfg-addAttributes' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.Model'>Kevlar.Model</span><br/><a href='source/Model.html#Kevlar-Model-cfg-addAttributes' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.Model-cfg-addAttributes' class='name expandable'>addAttributes</a><span> : String[]/Object[]</span></div><div class='description'><div class='short'>Array of Attribute declarations. ...</div><div class='long'><p>Array of <a href=\"#!/api/Kevlar.Attribute\" rel=\"Kevlar.Attribute\" class=\"docClass\">Attribute</a> declarations. These are objects with any number of properties, but they\nmust have the property 'name'. See the configuration options of <a href=\"#!/api/Kevlar.Attribute\" rel=\"Kevlar.Attribute\" class=\"docClass\">Kevlar.Attribute</a> for more information. Anonymous\nconfig objects will become instantiated <a href=\"#!/api/Kevlar.Attribute\" rel=\"Kevlar.Attribute\" class=\"docClass\">Kevlar.Attribute</a> objects. An item in the array may also simply be a\nstring, which will specify the name of the <a href=\"#!/api/Kevlar.Attribute\" rel=\"Kevlar.Attribute\" class=\"docClass\">Attribute</a>, with no other <a href=\"#!/api/Kevlar.Attribute\" rel=\"Kevlar.Attribute\" class=\"docClass\">Attribute</a>\nconfiguration options.</p>\n\n<p>Attributes defined on the prototype of a Model (like below), and its subclasses, are concatenated together come\ninstantiation time. This means that the <a href=\"#!/api/Kevlar.Model\" rel=\"Kevlar.Model\" class=\"docClass\">Kevlar.Model</a> base class can define the 'id' attribute, and then subclasses\ncan define their own attributes to append to it.  So if a subclass defined the attributes <code>[ 'name', 'phone' ]</code>, then the\nfinal concatenated array of attributes for the subclass would be <code>[ 'id', 'name', 'phone' ]</code>. This works for however many\nlevels of subclasses there are.</p>\n\n<p>This array will become an object (hash) come instantiation time, with the keys as the attribute names, and the values as\nthe instantiated <a href=\"#!/api/Kevlar.Attribute\" rel=\"Kevlar.Attribute\" class=\"docClass\">Kevlar.Attribute</a> objects that represent them.</p>\n<p>Defaults to: <code>[]</code></p></div></div></div><div id='cfg-idAttribute' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.Model'>Kevlar.Model</span><br/><a href='source/Model.html#Kevlar-Model-cfg-idAttribute' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.Model-cfg-idAttribute' class='name expandable'>idAttribute</a><span> : String</span></div><div class='description'><div class='short'>The attribute that should be used as the ID for the Model. ...</div><div class='long'><p>The attribute that should be used as the ID for the Model.</p>\n<p>Defaults to: <code>&quot;id&quot;</code></p></div></div></div><div id='cfg-listeners' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Kevlar.util.Observable' rel='Kevlar.util.Observable' class='defined-in docClass'>Kevlar.util.Observable</a><br/><a href='source/Observable.html#Kevlar-util-Observable-cfg-listeners' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.util.Observable-cfg-listeners' class='name expandable'>listeners</a><span> : Object</span></div><div class='description'><div class='short'>(optional) A config object containing one or more event handlers to be added to this\nobject during initialization. ...</div><div class='long'><p>(optional) <p>A config object containing one or more event handlers to be added to this\nobject during initialization.  This should be a valid listeners config object as specified in the\n<a href=\"#!/api/Kevlar.util.Observable-method-addListener\" rel=\"Kevlar.util.Observable-method-addListener\" class=\"docClass\">addListener</a> example for attaching multiple handlers at once.</p>\nTo access DOM events directly from a Component's HTMLElement, listeners must be added to the <i>Element</i>\nafter the Component has been rendered. A plugin can simplify this step:</p>\n\n<pre><code>// Plugin is configured with a listeners config object.\n// The Component is appended to the argument list of all handler functions.\nDomObserver = <a href=\"#!/api/Kevlar-method-extend\" rel=\"Kevlar-method-extend\" class=\"docClass\">Kevlar.extend</a>(Object, {\n    constructor: function(config) {\n        this.listeners = config.listeners ? config.listeners : config;\n    },\n\n    // Component passes itself into plugin&#39;s init method\n    initPlugin: function(c) {\n        var p, l = this.listeners;\n        for (p in l) {\n            if (<a href=\"#!/api/Kevlar-method-isFunction\" rel=\"Kevlar-method-isFunction\" class=\"docClass\">Kevlar.isFunction</a>(l[p])) {\n                l[p] = this.createHandler(l[p], c);\n            } else {\n                l[p].fn = this.createHandler(l[p].fn, c);\n            }\n        }\n\n        // Add the listeners to the Element immediately following the render call\n        c.render = c.render.createSequence(function() {\n            var e = c.getEl();\n            if (e) {\n                e.on(l);\n            }\n        });\n    },\n\n    createHandler: function(fn, c) {\n        return function(e) {\n            fn.call(this, e, c);\n        };\n    }\n});\n\nvar combo = new Kevlar.form.ComboBox({\n\n    // Collapse combo when its element is clicked on\n    plugins: [ new DomObserver({\n        click: function(evt, comp) {\n            comp.collapse();\n        }\n    })],\n    store: myStore,\n    typeAhead: true,\n    mode: 'local',\n    triggerAction: 'all'\n});\n</code></pre>\n\n\n<p></p></p>\n</div></div></div><div id='cfg-proxy' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.Model'>Kevlar.Model</span><br/><a href='source/Model.html#Kevlar-Model-cfg-proxy' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.Model-cfg-proxy' class='name expandable'>proxy</a><span> : <a href=\"#!/api/Kevlar.persistence.Proxy\" rel=\"Kevlar.persistence.Proxy\" class=\"docClass\">Kevlar.persistence.Proxy</a></span></div><div class='description'><div class='short'>The proxy to use (if any) to persist the data to the server. ...</div><div class='long'><p>The proxy to use (if any) to persist the data to the server.</p>\n<p>Defaults to: <code>null</code></p></div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-constructor' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.Model'>Kevlar.Model</span><br/><a href='source/Model.html#Kevlar-Model-method-constructor' target='_blank' class='view-source'>view source</a></div><strong class='new-keyword'>new</strong><a href='#!/api/Kevlar.Model-method-constructor' class='name expandable'>Kevlar.Model</a>( <span class='pre'>[Object data]</span> ) : Object</div><div class='description'><div class='short'>Creates a new Model instance. ...</div><div class='long'><p>Creates a new Model instance.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>data</span> : Object (optional)<div class='sub-desc'><p>Any initial data for the <a href=\"#!/api/Kevlar.Model-cfg-addAttributes\" rel=\"Kevlar.Model-cfg-addAttributes\" class=\"docClass\">attributes</a>, specified in an object (hash map). See <a href=\"#!/api/Kevlar.Model-method-set\" rel=\"Kevlar.Model-method-set\" class=\"docClass\">set</a>.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-addEvents' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Kevlar.util.Observable' rel='Kevlar.util.Observable' class='defined-in docClass'>Kevlar.util.Observable</a><br/><a href='source/Observable.html#Kevlar-util-Observable-method-addEvents' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.util.Observable-method-addEvents' class='name expandable'>addEvents</a>( <span class='pre'>Object/String o, String Optional</span> )</div><div class='description'><div class='short'>Adds the specified events to the list of events which this Observable may fire. ...</div><div class='long'><p>Adds the specified events to the list of events which this Observable may fire.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>o</span> : Object/String<div class='sub-desc'><p>Either an object with event names as properties with a value of <code>true</code>\nor the first event name string if multiple event names are being passed as separate parameters.</p>\n</div></li><li><span class='pre'>Optional</span> : String<div class='sub-desc'><p>. Event name if multiple event names are being passed as separate parameters.\nUsage:</p>\n\n<pre><code>this.addEvents('storeloaded', 'storecleared');\n</code></pre>\n\n</div></li></ul></div></div></div><div id='method-addListener' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Kevlar.util.Observable' rel='Kevlar.util.Observable' class='defined-in docClass'>Kevlar.util.Observable</a><br/><a href='source/Observable.html#Kevlar-util-Observable-method-addListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.util.Observable-method-addListener' class='name expandable'>addListener</a>( <span class='pre'>String eventName, Function handler, [Object scope], [Object options]</span> )</div><div class='description'><div class='short'>Appends an event handler to this object. ...</div><div class='long'><p>Appends an event handler to this object.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>eventName</span> : String<div class='sub-desc'><p>The name of the event to listen for.</p>\n</div></li><li><span class='pre'>handler</span> : Function<div class='sub-desc'><p>The method the event invokes.</p>\n</div></li><li><span class='pre'>scope</span> : Object (optional)<div class='sub-desc'><p>The scope (<code><b>this</b></code> reference) in which the handler function is executed.\n<b>If omitted, defaults to the object which fired the event.</b></p>\n</div></li><li><span class='pre'>options</span> : Object (optional)<div class='sub-desc'><p>An object containing handler configuration.\nproperties. This may contain any of the following properties:<ul>\n<li><b>scope</b> : Object<div class=\"sub-desc\">The scope (<code><b>this</b></code> reference) in which the handler function is executed.\n<b>If omitted, defaults to the object which fired the event.</b></div></li>\n<li><b>delay</b> : Number<div class=\"sub-desc\">The number of milliseconds to delay the invocation of the handler after the event fires.</div></li>\n<li><b>single</b> : Boolean<div class=\"sub-desc\">True to add a handler to handle just the next firing of the event, and then remove itself.</div></li>\n<li><b>buffer</b> : Number<div class=\"sub-desc\">Causes the handler to be scheduled to run in an <a href=\"#!/api/Kevlar.util.DelayedTask\" rel=\"Kevlar.util.DelayedTask\" class=\"docClass\">Kevlar.util.DelayedTask</a> delayed\nby the specified number of milliseconds. If the event fires again within that time, the original\nhandler is <em>not</em> invoked, but the new handler is scheduled in its place.</div></li>\n<li><b>target</b> : Observable<div class=\"sub-desc\">Only call the handler if the event was fired on the target Observable, <i>not</i>\nif the event was bubbled up from a child Observable.</div></li>\n</ul><br></p>\n\n<p>\n<b>Combining Options</b><br>\nUsing the options argument, it is possible to combine different types of listeners:<br>\n<br>\nA delayed, one-time listener.\n<pre><code>myDataView.on('click', this.onClick, this, {\nsingle: true,\ndelay: 100\n});</code></pre>\n<p>\n<b>Attaching multiple handlers in 1 call</b><br>\nThe method also allows for a single argument to be passed which is a config object containing properties\nwhich specify multiple handlers.\n<p>\n<pre><code>myGridPanel.on({\n'click' : {\n    fn: this.onClick,\n    scope: this,\n    delay: 100\n},\n'mouseover' : {\n    fn: this.onMouseOver,\n    scope: this\n},\n'mouseout' : {\n    fn: this.onMouseOut,\n    scope: this\n}\n});</code></pre>\n<p>\nOr a shorthand syntax:<br>\n<pre><code>myGridPanel.on({\n'click' : this.onClick,\n'mouseover' : this.onMouseOver,\n'mouseout' : this.onMouseOut,\n scope: this\n});</code></pre>\n\n</div></li></ul></div></div></div><div id='method-bind' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Kevlar.util.Observable' rel='Kevlar.util.Observable' class='defined-in docClass'>Kevlar.util.Observable</a><br/><a href='source/Observable.html#Kevlar-util-Observable-method-bind' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.util.Observable-method-bind' class='name expandable'>bind</a>( <span class='pre'>String eventName, Function handler, [Object scope], [Object options]</span> )</div><div class='description'><div class='short'>Appends an event handler to this object (shorthand for addListener.) ...</div><div class='long'><p>Appends an event handler to this object (shorthand for <a href=\"#!/api/Kevlar.util.Observable-method-addListener\" rel=\"Kevlar.util.Observable-method-addListener\" class=\"docClass\">addListener</a>.)</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>eventName</span> : String<div class='sub-desc'><p>The type of event to listen for</p>\n</div></li><li><span class='pre'>handler</span> : Function<div class='sub-desc'><p>The method the event invokes</p>\n</div></li><li><span class='pre'>scope</span> : Object (optional)<div class='sub-desc'><p>The scope (<code><b>this</b></code> reference) in which the handler function is executed.\n<b>If omitted, defaults to the object which fired the event.</b></p>\n</div></li><li><span class='pre'>options</span> : Object (optional)<div class='sub-desc'><p>An object containing handler configuration.</p>\n</div></li></ul></div></div></div><div id='method-commit' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.Model'>Kevlar.Model</span><br/><a href='source/Model.html#Kevlar-Model-method-commit' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.Model-method-commit' class='name expandable'>commit</a>( <span class='pre'></span> )</div><div class='description'><div class='short'>Commits dirty attributes' data. ...</div><div class='long'><p>Commits dirty attributes' data. Data can no longer be reverted after a commit has been performed. Note: When developing with a <a href=\"#!/api/Kevlar.Model-cfg-proxy\" rel=\"Kevlar.Model-cfg-proxy\" class=\"docClass\">proxy</a>,\nthis method should normally not need to be called explicitly, as it will be called upon the successful persistence of the Model's data\nto the server.</p>\n</div></div></div><div id='method-createAttribute' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.Model'>Kevlar.Model</span><br/><a href='source/Model.html#Kevlar-Model-method-createAttribute' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.Model-method-createAttribute' class='name expandable'>createAttribute</a>( <span class='pre'>Object attributeObj</span> ) : <a href=\"#!/api/Kevlar.Attribute\" rel=\"Kevlar.Attribute\" class=\"docClass\">Kevlar.Attribute</a><strong class='protected signature'>protected</strong></div><div class='description'><div class='short'>Factory method which by default creates a Kevlar.Attribute, but may be overridden by subclasses\nto create different K...</div><div class='long'><p>Factory method which by default creates a <a href=\"#!/api/Kevlar.Attribute\" rel=\"Kevlar.Attribute\" class=\"docClass\">Kevlar.Attribute</a>, but may be overridden by subclasses\nto create different <a href=\"#!/api/Kevlar.Attribute\" rel=\"Kevlar.Attribute\" class=\"docClass\">Kevlar.Attribute</a> subclasses.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>attributeObj</span> : Object<div class='sub-desc'><p>The attribute object provided on the prototype. If it was a string, it will have been\n  normalized to the object <code>{ name: attributeName }</code>.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Kevlar.Attribute\" rel=\"Kevlar.Attribute\" class=\"docClass\">Kevlar.Attribute</a></span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-destroy' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.Model'>Kevlar.Model</span><br/><a href='source/Model.html#Kevlar-Model-method-destroy' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.Model-method-destroy' class='name expandable'>destroy</a>( <span class='pre'>[Object options]</span> )</div><div class='description'><div class='short'>Destroys the Model on the backend, using the configured proxy. ...</div><div class='long'><p>Destroys the Model on the backend, using the configured <a href=\"#!/api/Kevlar.Model-cfg-proxy\" rel=\"Kevlar.Model-cfg-proxy\" class=\"docClass\">proxy</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>options</span> : Object (optional)<div class='sub-desc'><p>An object which may contain the following properties:</p>\n<ul><li><span class='pre'>async</span> : Boolean (optional)<div class='sub-desc'><p>True to make the request asynchronous, false to make it synchronous.</p>\n<p>Defaults to: <code>true</code></p></div></li><li><span class='pre'>success</span> : Function (optional)<div class='sub-desc'><p>Function to call if the destroy is successful.</p>\n</div></li><li><span class='pre'>error</span> : Function (optional)<div class='sub-desc'><p>Function to call if the destroy fails.</p>\n</div></li><li><span class='pre'>complete</span> : Function (optional)<div class='sub-desc'><p>Function to call when the operation is complete, regardless of a success or fail state.</p>\n</div></li><li><span class='pre'>scope</span> : Object (optional)<div class='sub-desc'><p>The object to call the <code>success</code>, <code>error</code>, and <code>complete</code> callbacks in. This may also\n  be provided as <code>context</code> if you prefer.</p>\n<p>Defaults to: <code>window</code></p></div></li></ul></div></li></ul></div></div></div><div id='method-enableBubble' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Kevlar.util.Observable' rel='Kevlar.util.Observable' class='defined-in docClass'>Kevlar.util.Observable</a><br/><a href='source/Observable.html#Kevlar-util-Observable-method-enableBubble' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.util.Observable-method-enableBubble' class='name expandable'>enableBubble</a>( <span class='pre'>Array/String.../Object... events</span> )</div><div class='description'><div class='short'>Enables events fired by this Observable to bubble up an owner hierarchy by calling getBubbleTarget to determine\nthe o...</div><div class='long'><p>Enables events fired by this Observable to bubble up an owner hierarchy by calling <a href=\"#!/api/Kevlar.util.Observable-method-getBubbleTarget\" rel=\"Kevlar.util.Observable-method-getBubbleTarget\" class=\"docClass\">getBubbleTarget</a> to determine\nthe object's owner. The default implementation of <a href=\"#!/api/Kevlar.util.Observable-method-getBubbleTarget\" rel=\"Kevlar.util.Observable-method-getBubbleTarget\" class=\"docClass\">getBubbleTarget</a> in this class is just to return null, which specifies no owner.\nThis method should be overridden by subclasses to provide this if applicable.</p>\n\n\n<p>This is commonly used by ui.Components to bubble events to owner iu.Containers. \nSee ui.Component.getBubbleTarget. The default implementation in ui.Component returns the Component's immediate owner, \nbut if a known target is required, this can be overridden to access that target more quickly.</p>\n\n\n<p>Example:</p>\n\n\n<pre><code>MyClass = <a href=\"#!/api/Kevlar-method-extend\" rel=\"Kevlar-method-extend\" class=\"docClass\">Kevlar.extend</a>( <a href=\"#!/api/Kevlar.util.Observable\" rel=\"Kevlar.util.Observable\" class=\"docClass\">Kevlar.util.Observable</a>, {\n\n    constructor : function() {\n        ...\n        \n        this.addEvents( 'myBubbledEvent' );\n        this.enableBubble( 'myBubbledEvent' );  // enable the bubble\n    },\n\n\n    getBubbleTarget : function() {\n        // return a reference to some component that is the target for bubbling. this component may be listened to directly for the 'myBubbledEvent' event\n    }\n\n} );\n</code></pre>\n\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>events</span> : Array/String.../Object...<div class='sub-desc'><p>The event name to bubble, Array of event names, or one argument per event name. This may also\n  be an array of objects, where the objects have the following properties:<div class=\"mdetail-params\"><ul>\n   <li><b>eventName</b> : String<div class=\"sub-desc\">The name of the event to enable bubbling for.</div></li>\n  <li>\n <b>bubbleFn</b> : Function\n <div class=\"sub-desc\">\n   A function that determines, at every level in the hierarchy, if bubbling should continue. If this function returns false\n   at any point, the bubbling of the event is stopped. The function is given one argument: the Observable that the event\n   has just been fired for.  This function can be used to test for some condition, and then stop bubbling based on that condition.\n   </div>\n   </li>\n   <li>\n   <b>scope</b> : Object\n   <div class=\"sub-desc\">The scope to run the bubbleFn in. Defaults to the Observable that the event bubbling was enabled on.</div>\n   </li>\n</ul></div></p>\n</div></li></ul></div></div></div><div id='method-fetch' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.Model'>Kevlar.Model</span><br/><a href='source/Model.html#Kevlar-Model-method-fetch' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.Model-method-fetch' class='name expandable'>fetch</a>( <span class='pre'></span> )</div><div class='description'><div class='short'>Alias of load. ...</div><div class='long'><p>Alias of <a href=\"#!/api/Kevlar.Model-method-load\" rel=\"Kevlar.Model-method-load\" class=\"docClass\">load</a>. See <a href=\"#!/api/Kevlar.Model-method-load\" rel=\"Kevlar.Model-method-load\" class=\"docClass\">load</a> for description and arguments.</p>\n</div></div></div><div id='method-fireEvent' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Kevlar.util.Observable' rel='Kevlar.util.Observable' class='defined-in docClass'>Kevlar.util.Observable</a><br/><a href='source/Observable.html#Kevlar-util-Observable-method-fireEvent' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.util.Observable-method-fireEvent' class='name expandable'>fireEvent</a>( <span class='pre'>String eventName, Object... args</span> ) : Boolean</div><div class='description'><div class='short'>Fires the specified event with the passed parameters (minus the event name). ...</div><div class='long'><p>Fires the specified event with the passed parameters (minus the event name).</p>\n\n\n<p>An event may be set to bubble up an Observable parent hierarchy (See ui.Component.getBubbleTarget)\nby calling <a href=\"#!/api/Kevlar.util.Observable-method-enableBubble\" rel=\"Kevlar.util.Observable-method-enableBubble\" class=\"docClass\">enableBubble</a>.</p>\n\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>eventName</span> : String<div class='sub-desc'><p>The name of the event to fire.</p>\n</div></li><li><span class='pre'>args</span> : Object...<div class='sub-desc'><p>Variable number of parameters are passed to handlers.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>returns false if any of the handlers return false otherwise it returns true.</p>\n</div></li></ul></div></div></div><div id='method-get' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.Model'>Kevlar.Model</span><br/><a href='source/Model.html#Kevlar-Model-method-get' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.Model-method-get' class='name expandable'>get</a>( <span class='pre'>String attributeName</span> ) : Mixed</div><div class='description'><div class='short'>Retrieves the value for the attribute given by attributeName. ...</div><div class='long'><p>Retrieves the value for the attribute given by <code>attributeName</code>. If the <a href=\"#!/api/Kevlar.Attribute\" rel=\"Kevlar.Attribute\" class=\"docClass\">Attribute</a> has a\n<a href=\"#!/api/Kevlar.Attribute-cfg-get\" rel=\"Kevlar.Attribute-cfg-get\" class=\"docClass\">get</a> function defined, that function will be called, and its return value\nwill be used as the return of this method.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>attributeName</span> : String<div class='sub-desc'><p>The name of the Attribute whose value to retieve.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Mixed</span><div class='sub-desc'><p>The value of the attribute given by <code>attributeName</code>, or undefined if the value has never been set.</p>\n</div></li></ul></div></div></div><div id='method-getAttributes' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.Model'>Kevlar.Model</span><br/><a href='source/Model.html#Kevlar-Model-method-getAttributes' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.Model-method-getAttributes' class='name expandable'>getAttributes</a>( <span class='pre'></span> ) : Object</div><div class='description'><div class='short'>Retrieves the Attribute objects that are present for the Model, in an object (hashmap) where the keys\nare the Attribu...</div><div class='long'><p>Retrieves the Attribute objects that are present for the Model, in an object (hashmap) where the keys\nare the Attribute names, and the values are the <a href=\"#!/api/Kevlar.Attribute\" rel=\"Kevlar.Attribute\" class=\"docClass\">Kevlar.Attribute</a> objects themselves.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-getBubbleTarget' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Kevlar.util.Observable' rel='Kevlar.util.Observable' class='defined-in docClass'>Kevlar.util.Observable</a><br/><a href='source/Observable.html#Kevlar-util-Observable-method-getBubbleTarget' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.util.Observable-method-getBubbleTarget' class='name expandable'>getBubbleTarget</a>( <span class='pre'></span> ) : <a href=\"#!/api/Kevlar.util.Observable\" rel=\"Kevlar.util.Observable\" class=\"docClass\">Kevlar.util.Observable</a><strong class='protected signature'>protected</strong></div><div class='description'><div class='short'>Specifies the Observable that is the target of the event's bubbling, if bubbling is enabled for\nevents by the enableB...</div><div class='long'><p>Specifies the Observable that is the target of the event's bubbling, if bubbling is enabled for\nevents by the <a href=\"#!/api/Kevlar.util.Observable-method-enableBubble\" rel=\"Kevlar.util.Observable-method-enableBubble\" class=\"docClass\">enableBubble</a> method. This default implementation returns null, and should\nbe overridden by subclasses to specify their bubbling target.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Kevlar.util.Observable\" rel=\"Kevlar.util.Observable\" class=\"docClass\">Kevlar.util.Observable</a></span><div class='sub-desc'><p>The Observable that is the target for event bubbling, or null if none.</p>\n</div></li></ul></div></div></div><div id='method-getChanges' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.Model'>Kevlar.Model</span><br/><a href='source/Model.html#Kevlar-Model-method-getChanges' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.Model-method-getChanges' class='name expandable'>getChanges</a>( <span class='pre'>[Object options]</span> ) : Object</div><div class='description'><div class='short'>Retrieves the values for all of the attributes in the Model whose values have been changed since\nthe last commit or r...</div><div class='long'><p>Retrieves the values for all of the <a href=\"#!/api/Kevlar.Attribute\" rel=\"Kevlar.Attribute\" class=\"docClass\">attributes</a> in the Model whose values have been changed since\nthe last <a href=\"#!/api/Kevlar.Model-method-commit\" rel=\"Kevlar.Model-method-commit\" class=\"docClass\">commit</a> or <a href=\"#!/api/Kevlar.Model-method-rollback\" rel=\"Kevlar.Model-method-rollback\" class=\"docClass\">rollback</a>.</p>\n\n<p>Note: returns a copy of the data so that the object retrieved from this method may be modified.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>options</span> : Object (optional)<div class='sub-desc'><p>An object (hash) of options to change the behavior of this method. This may include:</p>\n<ul><li><span class='pre'>persistedOnly</span> : Boolean (optional)<div class='sub-desc'><p>True to have the method only return data for the persisted Attributes (i.e.,\n  Attributes with the <a href=\"#!/api/Kevlar.Attribute-cfg-persist\" rel=\"Kevlar.Attribute-cfg-persist\" class=\"docClass\">persist</a> config set to true, which is the default).</p>\n</div></li></ul></div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>A hash of the attributes that have been changed since the last <a href=\"#!/api/Kevlar.Model-method-commit\" rel=\"Kevlar.Model-method-commit\" class=\"docClass\">commit</a> or <a href=\"#!/api/Kevlar.Model-method-rollback\" rel=\"Kevlar.Model-method-rollback\" class=\"docClass\">rollback</a>.\n  The hash's property names are the attribute names, and the hash's values are the new values.</p>\n</div></li></ul></div></div></div><div id='method-getData' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.Model'>Kevlar.Model</span><br/><a href='source/Model.html#Kevlar-Model-method-getData' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.Model-method-getData' class='name expandable'>getData</a>( <span class='pre'>[Object options]</span> ) : Object</div><div class='description'><div class='short'>Retrieves the values for all of the attributes in the Model. ...</div><div class='long'><p>Retrieves the values for all of the attributes in the Model. Note: returns a copy of the data so that the object\nretrieved from this method may be modified.</p>\n\n<p>@methods getData</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>options</span> : Object (optional)<div class='sub-desc'><p>An object (hash) of options to change the behavior of this method. This may include:</p>\n<ul><li><span class='pre'>persistedOnly</span> : Boolean (optional)<div class='sub-desc'><p>True to have the method only return data for the persisted Attributes (i.e.,\n  Attributes with the <a href=\"#!/api/Kevlar.Attribute-cfg-persist\" rel=\"Kevlar.Attribute-cfg-persist\" class=\"docClass\">persist</a> config set to true, which is the default).</p>\n</div></li></ul></div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>A hash of the data, where the property names are the keys, and the values are the <a href=\"#!/api/Kevlar.Attribute\" rel=\"Kevlar.Attribute\" class=\"docClass\">Attribute</a> values.</p>\n</div></li></ul></div></div></div><div id='method-getDefault' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.Model'>Kevlar.Model</span><br/><a href='source/Model.html#Kevlar-Model-method-getDefault' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.Model-method-getDefault' class='name expandable'>getDefault</a>( <span class='pre'>String attributeName</span> ) : Mixed</div><div class='description'><div class='short'>Returns the default value specified for an Attribute. ...</div><div class='long'><p>Returns the default value specified for an Attribute.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>attributeName</span> : String<div class='sub-desc'><p>The attribute name to retrieve the default value for.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Mixed</span><div class='sub-desc'><p>The default value for the attribute.</p>\n</div></li></ul></div></div></div><div id='method-getId' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.Model'>Kevlar.Model</span><br/><a href='source/Model.html#Kevlar-Model-method-getId' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.Model-method-getId' class='name expandable'>getId</a>( <span class='pre'></span> ) : Mixed</div><div class='description'><div class='short'>Retrieves the ID for the Model. ...</div><div class='long'><p>Retrieves the ID for the Model. This uses the configured <a href=\"#!/api/Kevlar.Model-cfg-idAttribute\" rel=\"Kevlar.Model-cfg-idAttribute\" class=\"docClass\">idAttribute</a> to retrieve\nthe correct ID attribute for the Model.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Mixed</span><div class='sub-desc'><p>The ID for the Model.</p>\n</div></li></ul></div></div></div><div id='method-getProxy' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.Model'>Kevlar.Model</span><br/><a href='source/Model.html#Kevlar-Model-method-getProxy' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.Model-method-getProxy' class='name expandable'>getProxy</a>( <span class='pre'></span> ) : <a href=\"#!/api/Kevlar.persistence.Proxy\" rel=\"Kevlar.persistence.Proxy\" class=\"docClass\">Kevlar.persistence.Proxy</a></div><div class='description'><div class='short'>Gets the proxy that is currently configured for this Model. ...</div><div class='long'><p>Gets the <a href=\"#!/api/Kevlar.Model-cfg-proxy\" rel=\"Kevlar.Model-cfg-proxy\" class=\"docClass\">proxy</a> that is currently configured for this Model. Note that\nthe same proxy instance is shared between all instances of the model.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Kevlar.persistence.Proxy\" rel=\"Kevlar.persistence.Proxy\" class=\"docClass\">Kevlar.persistence.Proxy</a></span><div class='sub-desc'><p>The proxy, or null if there is no proxy currently set.</p>\n</div></li></ul></div></div></div><div id='method-has' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.Model'>Kevlar.Model</span><br/><a href='source/Model.html#Kevlar-Model-method-has' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.Model-method-has' class='name expandable'>has</a>( <span class='pre'>String attributeName</span> ) : Boolean</div><div class='description'><div class='short'>Determines if the Model has a given attribute (attribute). ...</div><div class='long'><p>Determines if the Model has a given attribute (attribute).</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>attributeName</span> : String<div class='sub-desc'><p>The name of the attribute (attribute) name to test for.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True if the Model has the given attribute name.</p>\n</div></li></ul></div></div></div><div id='method-hasListener' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Kevlar.util.Observable' rel='Kevlar.util.Observable' class='defined-in docClass'>Kevlar.util.Observable</a><br/><a href='source/Observable.html#Kevlar-util-Observable-method-hasListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.util.Observable-method-hasListener' class='name expandable'>hasListener</a>( <span class='pre'>String eventName</span> ) : Boolean</div><div class='description'><div class='short'>Checks to see if this object has any listeners for a specified event ...</div><div class='long'><p>Checks to see if this object has any listeners for a specified event</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>eventName</span> : String<div class='sub-desc'><p>The name of the event to check for</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True if the event is being listened for, else false</p>\n</div></li></ul></div></div></div><div id='method-initialize' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.Model'>Kevlar.Model</span><br/><a href='source/Model.html#Kevlar-Model-method-initialize' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.Model-method-initialize' class='name expandable'>initialize</a>( <span class='pre'></span> )<strong class='protected signature'>protected</strong></div><div class='description'><div class='short'>Hook methods for subclasses to initialize themselves. ...</div><div class='long'><p>Hook methods for subclasses to initialize themselves. This method should be overridden in subclasses to\nprovide any model-specific initialization.</p>\n\n<p>Note that it is good practice to always call the superclass <code>initialize</code> method from within yours (even if\nyour class simply extends <a href=\"#!/api/Kevlar.Model\" rel=\"Kevlar.Model\" class=\"docClass\">Kevlar.Model</a>, which has no <code>initialize</code> implementation). This is to future proof it\nfrom being moved under another superclass, or if there is ever an implementation made in this class.</p>\n\n<p>Ex:</p>\n\n<pre><code>MyModel = Kevlar.Model.extend( {\n    initialize : function() {\n        MyModel.superclass.initialize.apply( this, arguments );   // or could be MyModel.__super__.initialize.apply( this, arguments );\n\n        // my initialization logic goes here\n    }\n}\n</code></pre>\n</div></div></div><div id='method-isDirty' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.Model'>Kevlar.Model</span><br/><a href='source/Model.html#Kevlar-Model-method-isDirty' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.Model-method-isDirty' class='name expandable'>isDirty</a>( <span class='pre'></span> ) : Boolean</div><div class='description'><div class='short'>Determines if the Model currently has un-committed (i.e. ...</div><div class='long'><p>Determines if the Model currently has un-committed (i.e. changed) data.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-isModified' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.Model'>Kevlar.Model</span><br/><a href='source/Model.html#Kevlar-Model-method-isModified' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.Model-method-isModified' class='name expandable'>isModified</a>( <span class='pre'>String attributeName</span> ) : Boolean</div><div class='description'><div class='short'>Determines if a given attribute has been modified since the last commit or rollback. ...</div><div class='long'><p>Determines if a given attribute has been modified since the last <a href=\"#!/api/Kevlar.Model-method-commit\" rel=\"Kevlar.Model-method-commit\" class=\"docClass\">commit</a> or <a href=\"#!/api/Kevlar.Model-method-rollback\" rel=\"Kevlar.Model-method-rollback\" class=\"docClass\">rollback</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>attributeName</span> : String<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True if the attribute has been modified, false otherwise.</p>\n</div></li></ul></div></div></div><div id='method-load' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.Model'>Kevlar.Model</span><br/><a href='source/Model.html#Kevlar-Model-method-load' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.Model-method-load' class='name expandable'>load</a>( <span class='pre'>[Object options]</span> )</div><div class='description'><div class='short'>Loads the Model data from the server, using the configured proxy. ...</div><div class='long'><p>Loads the Model data from the server, using the configured <a href=\"#!/api/Kevlar.Model-cfg-proxy\" rel=\"Kevlar.Model-cfg-proxy\" class=\"docClass\">proxy</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>options</span> : Object (optional)<div class='sub-desc'><p>An object which may contain the following properties:</p>\n<ul><li><span class='pre'>async</span> : Boolean (optional)<div class='sub-desc'><p>True to make the request asynchronous, false to make it synchronous.</p>\n<p>Defaults to: <code>true</code></p></div></li><li><span class='pre'>success</span> : Function (optional)<div class='sub-desc'><p>Function to call if the save is successful.</p>\n</div></li><li><span class='pre'>failure</span> : Function (optional)<div class='sub-desc'><p>Function to call if the save fails.</p>\n</div></li><li><span class='pre'>complete</span> : Function (optional)<div class='sub-desc'><p>Function to call when the operation is complete, regardless of a success or fail state.</p>\n</div></li><li><span class='pre'>scope</span> : Object (optional)<div class='sub-desc'><p>The object to call the <code>success</code>, <code>failure</code>, and <code>complete</code> callbacks in.</p>\n<p>Defaults to: <code>window</code></p></div></li></ul></div></li></ul></div></div></div><div id='method-on' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Kevlar.util.Observable' rel='Kevlar.util.Observable' class='defined-in docClass'>Kevlar.util.Observable</a><br/><a href='source/Observable.html#Kevlar-util-Observable-method-on' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.util.Observable-method-on' class='name expandable'>on</a>( <span class='pre'>String eventName, Function handler, [Object scope], [Object options]</span> )</div><div class='description'><div class='short'>Appends an event handler to this object (shorthand for addListener.) ...</div><div class='long'><p>Appends an event handler to this object (shorthand for <a href=\"#!/api/Kevlar.util.Observable-method-addListener\" rel=\"Kevlar.util.Observable-method-addListener\" class=\"docClass\">addListener</a>.)</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>eventName</span> : String<div class='sub-desc'><p>The type of event to listen for</p>\n</div></li><li><span class='pre'>handler</span> : Function<div class='sub-desc'><p>The method the event invokes</p>\n</div></li><li><span class='pre'>scope</span> : Object (optional)<div class='sub-desc'><p>The scope (<code><b>this</b></code> reference) in which the handler function is executed.\n<b>If omitted, defaults to the object which fired the event.</b></p>\n</div></li><li><span class='pre'>options</span> : Object (optional)<div class='sub-desc'><p>An object containing handler configuration.</p>\n</div></li></ul></div></div></div><div id='method-purgeListeners' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Kevlar.util.Observable' rel='Kevlar.util.Observable' class='defined-in docClass'>Kevlar.util.Observable</a><br/><a href='source/Observable.html#Kevlar-util-Observable-method-purgeListeners' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.util.Observable-method-purgeListeners' class='name expandable'>purgeListeners</a>( <span class='pre'></span> )</div><div class='description'><div class='short'>Removes all listeners for this object ...</div><div class='long'><p>Removes all listeners for this object</p>\n</div></div></div><div id='method-relayEvents' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Kevlar.util.Observable' rel='Kevlar.util.Observable' class='defined-in docClass'>Kevlar.util.Observable</a><br/><a href='source/Observable.html#Kevlar-util-Observable-method-relayEvents' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.util.Observable-method-relayEvents' class='name expandable'>relayEvents</a>( <span class='pre'>Object o, Array events</span> )</div><div class='description'><div class='short'>Relays selected events from the specified Observable as if the events were fired by &lt;b&gt;this&lt;/b&gt;. ...</div><div class='long'><p>Relays selected events from the specified Observable as if the events were fired by <code>&lt;b&gt;this&lt;/b&gt;</code>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>o</span> : Object<div class='sub-desc'><p>The Observable whose events this object is to relay.</p>\n</div></li><li><span class='pre'>events</span> : Array<div class='sub-desc'><p>Array of event names to relay.</p>\n</div></li></ul></div></div></div><div id='method-removeListener' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Kevlar.util.Observable' rel='Kevlar.util.Observable' class='defined-in docClass'>Kevlar.util.Observable</a><br/><a href='source/Observable.html#Kevlar-util-Observable-method-removeListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.util.Observable-method-removeListener' class='name expandable'>removeListener</a>( <span class='pre'>String eventName, Function handler, [Object scope]</span> )</div><div class='description'><div class='short'>Removes an event handler. ...</div><div class='long'><p>Removes an event handler.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>eventName</span> : String<div class='sub-desc'><p>The type of event the handler was associated with.</p>\n</div></li><li><span class='pre'>handler</span> : Function<div class='sub-desc'><p>The handler to remove. <b>This must be a reference to the function passed into the <a href=\"#!/api/Kevlar.util.Observable-method-addListener\" rel=\"Kevlar.util.Observable-method-addListener\" class=\"docClass\">addListener</a> call.</b></p>\n</div></li><li><span class='pre'>scope</span> : Object (optional)<div class='sub-desc'><p>The scope originally specified for the handler.</p>\n</div></li></ul></div></div></div><div id='method-resumeEvents' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Kevlar.util.Observable' rel='Kevlar.util.Observable' class='defined-in docClass'>Kevlar.util.Observable</a><br/><a href='source/Observable.html#Kevlar-util-Observable-method-resumeEvents' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.util.Observable-method-resumeEvents' class='name expandable'>resumeEvents</a>( <span class='pre'></span> )</div><div class='description'><div class='short'>Resume firing events. ...</div><div class='long'><p>Resume firing events. (see <a href=\"#!/api/Kevlar.util.Observable-method-suspendEvents\" rel=\"Kevlar.util.Observable-method-suspendEvents\" class=\"docClass\">suspendEvents</a>)\nIf events were suspended using the <code>&lt;b&gt;queueSuspended&lt;/b&gt;</code> parameter, then all\nevents fired during event suspension will be sent to any listeners now.</p>\n</div></div></div><div id='method-rollback' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.Model'>Kevlar.Model</span><br/><a href='source/Model.html#Kevlar-Model-method-rollback' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.Model-method-rollback' class='name expandable'>rollback</a>( <span class='pre'></span> )</div><div class='description'><div class='short'>Rolls back the Model attributes that have been changed since the last commit or rollback. ...</div><div class='long'><p>Rolls back the Model attributes that have been changed since the last commit or rollback.</p>\n</div></div></div><div id='method-save' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.Model'>Kevlar.Model</span><br/><a href='source/Model.html#Kevlar-Model-method-save' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.Model-method-save' class='name expandable'>save</a>( <span class='pre'>[Object options]</span> )</div><div class='description'><div class='short'>Persists the Model data to the backend, using the configured proxy. ...</div><div class='long'><p>Persists the Model data to the backend, using the configured <a href=\"#!/api/Kevlar.Model-cfg-proxy\" rel=\"Kevlar.Model-cfg-proxy\" class=\"docClass\">proxy</a>. If the request to persist the Model's data is successful,\nthe Model's data will be <a href=\"#!/api/Kevlar.Model-method-commit\" rel=\"Kevlar.Model-method-commit\" class=\"docClass\">committed</a> upon completion.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>options</span> : Object (optional)<div class='sub-desc'><p>An object which may contain the following properties:</p>\n<ul><li><span class='pre'>async</span> : Boolean (optional)<div class='sub-desc'><p>True to make the request asynchronous, false to make it synchronous.</p>\n<p>Defaults to: <code>true</code></p></div></li><li><span class='pre'>success</span> : Function (optional)<div class='sub-desc'><p>Function to call if the save is successful.</p>\n</div></li><li><span class='pre'>error</span> : Function (optional)<div class='sub-desc'><p>Function to call if the save fails.</p>\n</div></li><li><span class='pre'>complete</span> : Function (optional)<div class='sub-desc'><p>Function to call when the operation is complete, regardless of a success or fail state.</p>\n</div></li><li><span class='pre'>scope</span> : Object (optional)<div class='sub-desc'><p>The object to call the <code>success</code>, <code>error</code>, and <code>complete</code> callbacks in. This may also\n  be provided as <code>context</code> if you prefer.</p>\n<p>Defaults to: <code>window</code></p></div></li></ul></div></li></ul></div></div></div><div id='method-set' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.Model'>Kevlar.Model</span><br/><a href='source/Model.html#Kevlar-Model-method-set' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.Model-method-set' class='name expandable'>set</a>( <span class='pre'>String/Object attributeName, [Mixed value]</span> )</div><div class='description'><div class='short'>Sets the value for a Attribute given its name, and a value. ...</div><div class='long'><p>Sets the value for a <a href=\"#!/api/Kevlar.Attribute\" rel=\"Kevlar.Attribute\" class=\"docClass\">Attribute</a> given its <code>name</code>, and a <code>value</code>. For example, a call could be made as this:</p>\n\n<pre><code>model.set( 'attribute1', 'value1' );\n</code></pre>\n\n<p>As an alternative form, multiple valuse can be set at once by passing an Object into the first argument of this method. Ex:</p>\n\n<pre><code>model.set( { key1: 'value1', key2: 'value2' } );\n</code></pre>\n\n<p>Note that in this form, the method will ignore any property in the object (hash) that don't have associated Attributes.<br><br></p>\n\n<p>When attributes are set, their <a href=\"#!/api/Kevlar.Attribute-cfg-set\" rel=\"Kevlar.Attribute-cfg-set\" class=\"docClass\">Kevlar.Attribute.set</a> method is run, if they have one defined.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>attributeName</span> : String/Object<div class='sub-desc'><p>The attribute name for the Attribute to set, or an object (hash) of name/value pairs.</p>\n</div></li><li><span class='pre'>value</span> : Mixed (optional)<div class='sub-desc'><p>The value to set to the attribute. Required if the <code>attributeName</code> argument is a string (i.e. not a hash).</p>\n</div></li></ul></div></div></div><div id='method-setProxy' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.Model'>Kevlar.Model</span><br/><a href='source/Model.html#Kevlar-Model-method-setProxy' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.Model-method-setProxy' class='name expandable'>setProxy</a>( <span class='pre'><a href=\"#!/api/Kevlar.persistence.Proxy\" rel=\"Kevlar.persistence.Proxy\" class=\"docClass\">Kevlar.persistence.Proxy</a> proxy</span> )</div><div class='description'><div class='short'>Sets the proxy to use to persist the Model's data. ...</div><div class='long'><p>Sets the <a href=\"#!/api/Kevlar.Model-cfg-proxy\" rel=\"Kevlar.Model-cfg-proxy\" class=\"docClass\">proxy</a> to use to persist the Model's data. Note that this is set\nto the <em>prototype</em> of the Model, for use with all instances of the Model. Because\nof this, it is usually best to define the <a href=\"#!/api/Kevlar.Model-cfg-proxy\" rel=\"Kevlar.Model-cfg-proxy\" class=\"docClass\">proxy</a> on the prototype of a Model\nsubclass.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>proxy</span> : <a href=\"#!/api/Kevlar.persistence.Proxy\" rel=\"Kevlar.persistence.Proxy\" class=\"docClass\">Kevlar.persistence.Proxy</a><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-suspendEvents' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Kevlar.util.Observable' rel='Kevlar.util.Observable' class='defined-in docClass'>Kevlar.util.Observable</a><br/><a href='source/Observable.html#Kevlar-util-Observable-method-suspendEvents' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.util.Observable-method-suspendEvents' class='name expandable'>suspendEvents</a>( <span class='pre'>Boolean queueSuspended</span> )</div><div class='description'><div class='short'>Suspend the firing of all events. ...</div><div class='long'><p>Suspend the firing of all events. (see <a href=\"#!/api/Kevlar.util.Observable-method-resumeEvents\" rel=\"Kevlar.util.Observable-method-resumeEvents\" class=\"docClass\">resumeEvents</a>)</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>queueSuspended</span> : Boolean<div class='sub-desc'><p>Pass as true to queue up suspended events to be fired\nafter the <a href=\"#!/api/Kevlar.util.Observable-method-resumeEvents\" rel=\"Kevlar.util.Observable-method-resumeEvents\" class=\"docClass\">resumeEvents</a> call instead of discarding all suspended events;</p>\n</div></li></ul></div></div></div><div id='method-toJSON' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.Model'>Kevlar.Model</span><br/><a href='source/Model.html#Kevlar-Model-method-toJSON' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.Model-method-toJSON' class='name expandable'>toJSON</a>( <span class='pre'></span> )</div><div class='description'><div class='short'>Alias of getData, which is currently just for compatibility with\nBackbone's Collection. ...</div><div class='long'><p>Alias of <a href=\"#!/api/Kevlar.Model-method-getData\" rel=\"Kevlar.Model-method-getData\" class=\"docClass\">getData</a>, which is currently just for compatibility with\nBackbone's Collection. Do not use. Use <a href=\"#!/api/Kevlar.Model-method-getData\" rel=\"Kevlar.Model-method-getData\" class=\"docClass\">getData</a> instead.</p>\n</div></div></div><div id='method-trigger' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Kevlar.util.Observable' rel='Kevlar.util.Observable' class='defined-in docClass'>Kevlar.util.Observable</a><br/><a href='source/Observable.html#Kevlar-util-Observable-method-trigger' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.util.Observable-method-trigger' class='name expandable'>trigger</a>( <span class='pre'></span> )</div><div class='description'><div class='short'>Alias of fireEvent ...</div><div class='long'><p>Alias of <a href=\"#!/api/Kevlar.util.Observable-method-fireEvent\" rel=\"Kevlar.util.Observable-method-fireEvent\" class=\"docClass\">fireEvent</a></p>\n</div></div></div><div id='method-un' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Kevlar.util.Observable' rel='Kevlar.util.Observable' class='defined-in docClass'>Kevlar.util.Observable</a><br/><a href='source/Observable.html#Kevlar-util-Observable-method-un' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.util.Observable-method-un' class='name expandable'>un</a>( <span class='pre'>String eventName, Function handler, [Object scope]</span> )</div><div class='description'><div class='short'>Removes an event handler (shorthand for removeListener.) ...</div><div class='long'><p>Removes an event handler (shorthand for <a href=\"#!/api/Kevlar.util.Observable-method-removeListener\" rel=\"Kevlar.util.Observable-method-removeListener\" class=\"docClass\">removeListener</a>.)</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>eventName</span> : String<div class='sub-desc'><p>The type of event the handler was associated with.</p>\n</div></li><li><span class='pre'>handler</span> : Function<div class='sub-desc'><p>The handler to remove. <b>This must be a reference to the function passed into the <a href=\"#!/api/Kevlar.util.Observable-method-addListener\" rel=\"Kevlar.util.Observable-method-addListener\" class=\"docClass\">addListener</a> call.</b></p>\n</div></li><li><span class='pre'>scope</span> : Object (optional)<div class='sub-desc'><p>The scope originally specified for the handler.</p>\n</div></li></ul></div></div></div><div id='method-unbind' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Kevlar.util.Observable' rel='Kevlar.util.Observable' class='defined-in docClass'>Kevlar.util.Observable</a><br/><a href='source/Observable.html#Kevlar-util-Observable-method-unbind' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.util.Observable-method-unbind' class='name expandable'>unbind</a>( <span class='pre'>String eventName, Function handler, [Object scope]</span> )</div><div class='description'><div class='short'>Removes an event handler (shorthand for removeListener.) ...</div><div class='long'><p>Removes an event handler (shorthand for <a href=\"#!/api/Kevlar.util.Observable-method-removeListener\" rel=\"Kevlar.util.Observable-method-removeListener\" class=\"docClass\">removeListener</a>.)</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>eventName</span> : String<div class='sub-desc'><p>The type of event the handler was associated with.</p>\n</div></li><li><span class='pre'>handler</span> : Function<div class='sub-desc'><p>The handler to remove. <b>This must be a reference to the function passed into the <a href=\"#!/api/Kevlar.util.Observable-method-addListener\" rel=\"Kevlar.util.Observable-method-addListener\" class=\"docClass\">addListener</a> call.</b></p>\n</div></li><li><span class='pre'>scope</span> : Object (optional)<div class='sub-desc'><p>The scope originally specified for the handler.</p>\n</div></li></ul></div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-event'>Events</h3><div class='subsection'><div id='event-change' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.Model'>Kevlar.Model</span><br/><a href='source/Model.html#Kevlar-Model-event-change' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.Model-event-change' class='name expandable'>change</a>( <span class='pre'><a href=\"#!/api/Kevlar.Model\" rel=\"Kevlar.Model\" class=\"docClass\">Kevlar.Model</a> model, String attributeName, Mixed value</span> )</div><div class='description'><div class='short'>Fires when a Kevlar.Attribute in the Model has changed its value. ...</div><div class='long'><p>Fires when a <a href=\"#!/api/Kevlar.Attribute\" rel=\"Kevlar.Attribute\" class=\"docClass\">Kevlar.Attribute</a> in the Model has changed its value.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>model</span> : <a href=\"#!/api/Kevlar.Model\" rel=\"Kevlar.Model\" class=\"docClass\">Kevlar.Model</a><div class='sub-desc'><p>This Model instance.</p>\n</div></li><li><span class='pre'>attributeName</span> : String<div class='sub-desc'><p>The attribute name for the Attribute that was changed.</p>\n</div></li><li><span class='pre'>value</span> : Mixed<div class='sub-desc'><p>The new value.</p>\n</div></li></ul></div></div></div><div id='event-destroy' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.Model'>Kevlar.Model</span><br/><a href='source/Model.html#Kevlar-Model-event-destroy' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.Model-event-destroy' class='name expandable'>destroy</a>( <span class='pre'><a href=\"#!/api/Kevlar.Model\" rel=\"Kevlar.Model\" class=\"docClass\">Kevlar.Model</a> model</span> )</div><div class='description'><div class='short'>Fires when the Model has been destroyed (via destroy). ...</div><div class='long'><p>Fires when the Model has been destroyed (via <a href=\"#!/api/Kevlar.Model-method-destroy\" rel=\"Kevlar.Model-method-destroy\" class=\"docClass\">destroy</a>).</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>model</span> : <a href=\"#!/api/Kevlar.Model\" rel=\"Kevlar.Model\" class=\"docClass\">Kevlar.Model</a><div class='sub-desc'><p>This Model instance.</p>\n</div></li></ul></div></div></div></div></div></div></div>","uses":[],"code_type":"assignment","inheritdoc":null,"superclasses":["Kevlar.util.Observable","Kevlar.Model"],"mixins":[],"members":{"property":[],"cfg":[{"owner":"Kevlar.Model","meta":{},"name":"addAttributes","id":"cfg-addAttributes","tagname":"cfg"},{"owner":"Kevlar.Model","meta":{},"name":"idAttribute","id":"cfg-idAttribute","tagname":"cfg"},{"owner":"Kevlar.util.Observable","meta":{},"name":"listeners","id":"cfg-listeners","tagname":"cfg"},{"owner":"Kevlar.Model","meta":{},"name":"proxy","id":"cfg-proxy","tagname":"cfg"}],"css_var":[],"css_mixin":[],"event":[{"owner":"Kevlar.Model","meta":{},"name":"change","id":"event-change","tagname":"event"},{"owner":"Kevlar.Model","meta":{},"name":"destroy","id":"event-destroy","tagname":"event"}],"method":[{"owner":"Kevlar.Model","meta":{},"name":"constructor","id":"method-constructor","tagname":"method"},{"owner":"Kevlar.util.Observable","meta":{},"name":"addEvents","id":"method-addEvents","tagname":"method"},{"owner":"Kevlar.util.Observable","meta":{},"name":"addListener","id":"method-addListener","tagname":"method"},{"owner":"Kevlar.util.Observable","meta":{},"name":"bind","id":"method-bind","tagname":"method"},{"owner":"Kevlar.Model","meta":{},"name":"commit","id":"method-commit","tagname":"method"},{"owner":"Kevlar.Model","meta":{"protected":true},"name":"createAttribute","id":"method-createAttribute","tagname":"method"},{"owner":"Kevlar.Model","meta":{},"name":"destroy","id":"method-destroy","tagname":"method"},{"owner":"Kevlar.util.Observable","meta":{},"name":"enableBubble","id":"method-enableBubble","tagname":"method"},{"owner":"Kevlar.Model","meta":{},"name":"fetch","id":"method-fetch","tagname":"method"},{"owner":"Kevlar.util.Observable","meta":{},"name":"fireEvent","id":"method-fireEvent","tagname":"method"},{"owner":"Kevlar.Model","meta":{},"name":"get","id":"method-get","tagname":"method"},{"owner":"Kevlar.Model","meta":{},"name":"getAttributes","id":"method-getAttributes","tagname":"method"},{"owner":"Kevlar.util.Observable","meta":{"protected":true},"name":"getBubbleTarget","id":"method-getBubbleTarget","tagname":"method"},{"owner":"Kevlar.Model","meta":{},"name":"getChanges","id":"method-getChanges","tagname":"method"},{"owner":"Kevlar.Model","meta":{},"name":"getData","id":"method-getData","tagname":"method"},{"owner":"Kevlar.Model","meta":{},"name":"getDefault","id":"method-getDefault","tagname":"method"},{"owner":"Kevlar.Model","meta":{},"name":"getId","id":"method-getId","tagname":"method"},{"owner":"Kevlar.Model","meta":{},"name":"getProxy","id":"method-getProxy","tagname":"method"},{"owner":"Kevlar.Model","meta":{},"name":"has","id":"method-has","tagname":"method"},{"owner":"Kevlar.util.Observable","meta":{},"name":"hasListener","id":"method-hasListener","tagname":"method"},{"owner":"Kevlar.Model","meta":{"protected":true},"name":"initialize","id":"method-initialize","tagname":"method"},{"owner":"Kevlar.Model","meta":{},"name":"isDirty","id":"method-isDirty","tagname":"method"},{"owner":"Kevlar.Model","meta":{},"name":"isModified","id":"method-isModified","tagname":"method"},{"owner":"Kevlar.Model","meta":{},"name":"load","id":"method-load","tagname":"method"},{"owner":"Kevlar.util.Observable","meta":{},"name":"on","id":"method-on","tagname":"method"},{"owner":"Kevlar.util.Observable","meta":{},"name":"purgeListeners","id":"method-purgeListeners","tagname":"method"},{"owner":"Kevlar.util.Observable","meta":{},"name":"relayEvents","id":"method-relayEvents","tagname":"method"},{"owner":"Kevlar.util.Observable","meta":{},"name":"removeListener","id":"method-removeListener","tagname":"method"},{"owner":"Kevlar.util.Observable","meta":{},"name":"resumeEvents","id":"method-resumeEvents","tagname":"method"},{"owner":"Kevlar.Model","meta":{},"name":"rollback","id":"method-rollback","tagname":"method"},{"owner":"Kevlar.Model","meta":{},"name":"save","id":"method-save","tagname":"method"},{"owner":"Kevlar.Model","meta":{},"name":"set","id":"method-set","tagname":"method"},{"owner":"Kevlar.Model","meta":{},"name":"setProxy","id":"method-setProxy","tagname":"method"},{"owner":"Kevlar.util.Observable","meta":{},"name":"suspendEvents","id":"method-suspendEvents","tagname":"method"},{"owner":"Kevlar.Model","meta":{},"name":"toJSON","id":"method-toJSON","tagname":"method"},{"owner":"Kevlar.util.Observable","meta":{},"name":"trigger","id":"method-trigger","tagname":"method"},{"owner":"Kevlar.util.Observable","meta":{},"name":"un","id":"method-un","tagname":"method"},{"owner":"Kevlar.util.Observable","meta":{},"name":"unbind","id":"method-unbind","tagname":"method"}]},"component":false,"meta":{},"private":false,"mixedInto":[],"name":"Kevlar.Model","alternateClassNames":[],"aliases":{},"html_meta":{},"tagname":"class","extends":"Kevlar.util.Observable","requires":[],"id":"class-Kevlar.Model","allMixins":[],"subclasses":[],"inheritable":false});