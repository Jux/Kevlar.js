Ext.data.JsonP.Kevlar_Model({"tagname":"class","name":"Kevlar.Model","extends":"Kevlar.DataComponent","mixins":[],"alternateClassNames":[],"aliases":{},"singleton":false,"requires":[],"uses":[],"code_type":"assignment","inheritable":false,"inheritdoc":null,"meta":{},"id":"class-Kevlar.Model","members":{"cfg":[{"name":"addAttributes","tagname":"cfg","owner":"Kevlar.Model","meta":{},"id":"cfg-addAttributes"},{"name":"attributes","tagname":"cfg","owner":"Kevlar.Model","meta":{},"id":"cfg-attributes"},{"name":"idAttribute","tagname":"cfg","owner":"Kevlar.Model","meta":{},"id":"cfg-idAttribute"},{"name":"persistenceProxy","tagname":"cfg","owner":"Kevlar.Model","meta":{},"id":"cfg-persistenceProxy"}],"property":[{"name":"attributes","tagname":"property","owner":"Kevlar.Model","meta":{"private":true},"id":"property-attributes"},{"name":"clientId","tagname":"property","owner":"Kevlar.DataComponent","meta":{"protected":true},"id":"property-clientId"},{"name":"data","tagname":"property","owner":"Kevlar.Model","meta":{"private":true},"id":"property-data"},{"name":"dirty","tagname":"property","owner":"Kevlar.Model","meta":{"private":true},"id":"property-dirty"},{"name":"embeddedCollectionAddRemoveReorderHandlers","tagname":"property","owner":"Kevlar.Model","meta":{"private":true},"id":"property-embeddedCollectionAddRemoveReorderHandlers"},{"name":"embeddedDataComponentChangeHandlers","tagname":"property","owner":"Kevlar.Model","meta":{"private":true},"id":"property-embeddedDataComponentChangeHandlers"},{"name":"id","tagname":"property","owner":"Kevlar.Model","meta":{"private":true},"id":"property-id"},{"name":"modifiedData","tagname":"property","owner":"Kevlar.Model","meta":{"private":true},"id":"property-modifiedData"}],"method":[{"name":"constructor","tagname":"method","owner":"Kevlar.Model","meta":{},"id":"method-constructor"},{"name":"clone","tagname":"method","owner":"Kevlar.Model","meta":{},"id":"method-clone"},{"name":"commit","tagname":"method","owner":"Kevlar.Model","meta":{},"id":"method-commit"},{"name":"destroy","tagname":"method","owner":"Kevlar.Model","meta":{},"id":"method-destroy"},{"name":"fetch","tagname":"method","owner":"Kevlar.Model","meta":{},"id":"method-fetch"},{"name":"get","tagname":"method","owner":"Kevlar.Model","meta":{},"id":"method-get"},{"name":"getAttributes","tagname":"method","owner":"Kevlar.Model","meta":{},"id":"method-getAttributes"},{"name":"getChanges","tagname":"method","owner":"Kevlar.Model","meta":{},"id":"method-getChanges"},{"name":"getClientId","tagname":"method","owner":"Kevlar.DataComponent","meta":{},"id":"method-getClientId"},{"name":"getData","tagname":"method","owner":"Kevlar.Model","meta":{},"id":"method-getData"},{"name":"getDefault","tagname":"method","owner":"Kevlar.Model","meta":{},"id":"method-getDefault"},{"name":"getEmbeddedDataComponentAttributes","tagname":"method","owner":"Kevlar.Model","meta":{"private":true},"id":"method-getEmbeddedDataComponentAttributes"},{"name":"getId","tagname":"method","owner":"Kevlar.Model","meta":{},"id":"method-getId"},{"name":"getIdAttribute","tagname":"method","owner":"Kevlar.Model","meta":{},"id":"method-getIdAttribute"},{"name":"getIdAttributeName","tagname":"method","owner":"Kevlar.Model","meta":{},"id":"method-getIdAttributeName"},{"name":"getPersistenceProxy","tagname":"method","owner":"Kevlar.Model","meta":{},"id":"method-getPersistenceProxy"},{"name":"has","tagname":"method","owner":"Kevlar.Model","meta":{},"id":"method-has"},{"name":"hasIdAttribute","tagname":"method","owner":"Kevlar.Model","meta":{},"id":"method-hasIdAttribute"},{"name":"initialize","tagname":"method","owner":"Kevlar.Model","meta":{"protected":true},"id":"method-initialize"},{"name":"isDirty","tagname":"method","owner":"Kevlar.Model","meta":{},"id":"method-isDirty"},{"name":"isModified","tagname":"method","owner":"Kevlar.Model","meta":{},"id":"method-isModified"},{"name":"isNew","tagname":"method","owner":"Kevlar.Model","meta":{},"id":"method-isNew"},{"name":"load","tagname":"method","owner":"Kevlar.Model","meta":{},"id":"method-load"},{"name":"onEmbeddedCollectionAddRemoveReorder","tagname":"method","owner":"Kevlar.Model","meta":{"private":true},"id":"method-onEmbeddedCollectionAddRemoveReorder"},{"name":"onEmbeddedDataComponentChange","tagname":"method","owner":"Kevlar.Model","meta":{"private":true},"id":"method-onEmbeddedDataComponentChange"},{"name":"previous","tagname":"method","owner":"Kevlar.Model","meta":{},"id":"method-previous"},{"name":"raw","tagname":"method","owner":"Kevlar.Model","meta":{},"id":"method-raw"},{"name":"rollback","tagname":"method","owner":"Kevlar.Model","meta":{},"id":"method-rollback"},{"name":"save","tagname":"method","owner":"Kevlar.Model","meta":{},"id":"method-save"},{"name":"set","tagname":"method","owner":"Kevlar.Model","meta":{},"id":"method-set"},{"name":"setProxy","tagname":"method","owner":"Kevlar.Model","meta":{},"id":"method-setProxy"},{"name":"toJSON","tagname":"method","owner":"Kevlar.Model","meta":{},"id":"method-toJSON"}],"event":[{"name":"change","tagname":"event","owner":"Kevlar.Model","meta":{},"id":"event-change"},{"name":"commit","tagname":"event","owner":"Kevlar.Model","meta":{},"id":"event-commit"},{"name":"destroy","tagname":"event","owner":"Kevlar.Model","meta":{},"id":"event-destroy"},{"name":"rollback","tagname":"event","owner":"Kevlar.Model","meta":{},"id":"event-rollback"}],"css_var":[],"css_mixin":[]},"statics":{"cfg":[],"property":[{"name":"__Kevlar_modelTypeId","tagname":"property","owner":"Kevlar.Model","meta":{"private":true,"static":true},"id":"static-property-__Kevlar_modelTypeId"}],"method":[],"event":[],"css_var":[],"css_mixin":[]},"files":[{"filename":"Model.js","href":"Model.html#Kevlar-Model"}],"html_meta":{},"component":false,"superclasses":["Kevlar.DataComponent"],"subclasses":[],"mixedInto":[],"parentMixins":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'><a href='#!/api/Kevlar.DataComponent' rel='Kevlar.DataComponent' class='docClass'>Kevlar.DataComponent</a><div class='subclass '><strong>Kevlar.Model</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/Model.html#Kevlar-Model' target='_blank'>Model.js</a></div></pre><div class='doc-contents'><p>Generalized key/value data storage class, which has a number of data-related features, including the ability to persist its data to a backend server.\nBasically, a Model represents some object of data that your application uses. For example, in an online store, one might define two Models:\none for Users, and the other for Products. These would be <code>User</code> and <code>Product</code> models, respectively. Each of these Models would in turn,\nhave the <a href=\"#!/api/Kevlar.attribute.Attribute\" rel=\"Kevlar.attribute.Attribute\" class=\"docClass\">Attributes</a> (data values) that each Model is made up of. Ex: A User model may have: <code>userId</code>, <code>firstName</code>, and\n<code>lastName</code> Attributes.</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-cfg'>Config options</h3><div class='subsection'><div id='cfg-addAttributes' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.Model'>Kevlar.Model</span><br/><a href='source/Model.html#Kevlar-Model-cfg-addAttributes' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.Model-cfg-addAttributes' class='name expandable'>addAttributes</a><span> : String[]/Object[]</span></div><div class='description'><div class='short'>Alias of attributes, which may make more sense to use in hierarchies of models that go past more than one level of ne...</div><div class='long'><p>Alias of <a href=\"#!/api/Kevlar.Model-cfg-attributes\" rel=\"Kevlar.Model-cfg-attributes\" class=\"docClass\">attributes</a>, which may make more sense to use in hierarchies of models that go past more than one level of nesting,\nas it conveys the meaning that the attributes are being <em>added</em> to the attributes that are already defined in its superclass, not\nreplacing them.</p>\n</div></div></div><div id='cfg-attributes' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.Model'>Kevlar.Model</span><br/><a href='source/Model.html#Kevlar-Model-cfg-attributes' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.Model-cfg-attributes' class='name expandable'>attributes</a><span> : String[]/Object[]</span></div><div class='description'><div class='short'>Array of Attribute declarations. ...</div><div class='long'><p>Array of <a href=\"#!/api/Kevlar.attribute.Attribute\" rel=\"Kevlar.attribute.Attribute\" class=\"docClass\">Attribute</a> declarations. These are objects with any number of properties, but they\nmust have the property 'name'. See the configuration options of <a href=\"#!/api/Kevlar.attribute.Attribute\" rel=\"Kevlar.attribute.Attribute\" class=\"docClass\">Kevlar.attribute.Attribute</a> for more information.</p>\n\n<p>Anonymous config objects defined here will become instantiated <a href=\"#!/api/Kevlar.attribute.Attribute\" rel=\"Kevlar.attribute.Attribute\" class=\"docClass\">Kevlar.attribute.Attribute</a> objects. An item in the array may also simply\nbe a string, which will specify the name of the <a href=\"#!/api/Kevlar.attribute.Attribute\" rel=\"Kevlar.attribute.Attribute\" class=\"docClass\">Attribute</a>, with no other <a href=\"#!/api/Kevlar.attribute.Attribute\" rel=\"Kevlar.attribute.Attribute\" class=\"docClass\">Attribute</a>\nconfiguration options.</p>\n\n<p>Attributes defined on the prototype of a Model, and its superclasses, are concatenated together come\ninstantiation time. This means that the <a href=\"#!/api/Kevlar.Model\" rel=\"Kevlar.Model\" class=\"docClass\">Kevlar.Model</a> base class can define the 'id' attribute, and then subclasses\ncan define their own attributes to append to it. So if a subclass defined the attributes <code>[ 'name', 'phone' ]</code>, then the\nfinal concatenated array of attributes for the subclass would be <code>[ 'id', 'name', 'phone' ]</code>. This works for however many\nlevels of subclasses there are.</p>\n\n<p>Example:</p>\n\n<pre><code>attributes : [\n    'id',    // name-only; no other configs for this attribute (not recommended! should declare the <a href=\"#!/api/Kevlar.attribute.Attribute-cfg-type\" rel=\"Kevlar.attribute.Attribute-cfg-type\" class=\"docClass\">type</a>)\n    { name: 'firstName', type: 'string' },\n    { name: 'lastName', type: 'string' },\n    {\n        name : 'fullName',\n        get  : function( value, model ) {\n            return model.get( 'firstName' ) + ' ' + model.get( 'lastName' );\n        }\n    }\n]\n</code></pre>\n\n<p>Note: If using hierarchies of more than one Model subclass deep, consider using the <a href=\"#!/api/Kevlar.Model-cfg-addAttributes\" rel=\"Kevlar.Model-cfg-addAttributes\" class=\"docClass\">addAttributes</a> alias instead of this\nconfig, which does the same thing (defines attributes), but better conveys that attributes in subclasses are being <em>added</em> to the\nattributes of the superclass, rather than <em>overriding</em> attributes of the superclass.</p>\n</div></div></div><div id='cfg-idAttribute' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.Model'>Kevlar.Model</span><br/><a href='source/Model.html#Kevlar-Model-cfg-idAttribute' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.Model-cfg-idAttribute' class='name expandable'>idAttribute</a><span> : String</span></div><div class='description'><div class='short'>The attribute that should be used as the ID for the Model. ...</div><div class='long'><p>The attribute that should be used as the ID for the Model.</p>\n<p>Defaults to: <code>&quot;id&quot;</code></p></div></div></div><div id='cfg-persistenceProxy' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.Model'>Kevlar.Model</span><br/><a href='source/Model.html#Kevlar-Model-cfg-persistenceProxy' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.Model-cfg-persistenceProxy' class='name expandable'>persistenceProxy</a><span> : <a href=\"#!/api/Kevlar.persistence.Proxy\" rel=\"Kevlar.persistence.Proxy\" class=\"docClass\">Kevlar.persistence.Proxy</a></span></div><div class='description'><div class='short'>The persistence proxy to use (if any) to persist the data to the server. ...</div><div class='long'><p>The persistence proxy to use (if any) to persist the data to the server.</p>\n<p>Defaults to: <code>null</code></p></div></div></div></div></div><div class='members-section'><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div class='definedBy'>Defined By</div><h4 class='members-subtitle'>Instance Properties</h3><div id='property-attributes' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.Model'>Kevlar.Model</span><br/><a href='source/Model.html#Kevlar-Model-property-attributes' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.Model-property-attributes' class='name expandable'>attributes</a><span> : Object</span><strong class='private signature'>private</strong></div><div class='description'><div class='short'>A hash of the combined Attributes, which have been put together from the current Model subclass, and all of\nits super...</div><div class='long'><p>A hash of the combined Attributes, which have been put together from the current Model subclass, and all of\nits superclasses.</p>\n</div></div></div><div id='property-clientId' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Kevlar.DataComponent' rel='Kevlar.DataComponent' class='defined-in docClass'>Kevlar.DataComponent</a><br/><a href='source/DataComponent.html#Kevlar-DataComponent-property-clientId' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.DataComponent-property-clientId' class='name expandable'>clientId</a><span> : String</span><strong class='protected signature'>protected</strong></div><div class='description'><div class='short'>(readonly)\n\nA unique ID for the Model on the client side. ...</div><div class='long'><p>(readonly)</p>\n\n<p>A unique ID for the Model on the client side. This is used to uniquely identify each Model instance.\nRetrieve with <a href=\"#!/api/Kevlar.DataComponent-method-getClientId\" rel=\"Kevlar.DataComponent-method-getClientId\" class=\"docClass\">getClientId</a>.</p>\n</div></div></div><div id='property-data' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.Model'>Kevlar.Model</span><br/><a href='source/Model.html#Kevlar-Model-property-data' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.Model-property-data' class='name expandable'>data</a><span> : Object</span><strong class='private signature'>private</strong></div><div class='description'><div class='short'>A hash that holds the current data for the Attributes. ...</div><div class='long'><p>A hash that holds the current data for the <a href=\"#!/api/Kevlar.attribute.Attribute\" rel=\"Kevlar.attribute.Attribute\" class=\"docClass\">Attributes</a>. The property names in this object match\nthe attribute names.  This hash holds the current data as it is modified by <a href=\"#!/api/Kevlar.Model-method-set\" rel=\"Kevlar.Model-method-set\" class=\"docClass\">set</a>.</p>\n</div></div></div><div id='property-dirty' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.Model'>Kevlar.Model</span><br/><a href='source/Model.html#Kevlar-Model-property-dirty' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.Model-property-dirty' class='name expandable'>dirty</a><span> : Boolean</span><strong class='private signature'>private</strong></div><div class='description'><div class='short'>Flag for quick-testing if the Model currently has un-committed data. ...</div><div class='long'><p>Flag for quick-testing if the Model currently has un-committed data.</p>\n<p>Defaults to: <code>false</code></p></div></div></div><div id='property-embeddedCollectionAddRemoveReorderHandlers' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.Model'>Kevlar.Model</span><br/><a href='source/Model.html#Kevlar-Model-property-embeddedCollectionAddRemoveReorderHandlers' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.Model-property-embeddedCollectionAddRemoveReorderHandlers' class='name expandable'>embeddedCollectionAddRemoveReorderHandlers</a><span> : Object</span><strong class='private signature'>private</strong></div><div class='description'><div class='short'>A hashmap of Kevlar.Collection.add, Kevlar.Collection.remove, and Kevlar.Collection.reorder handlers for any\nembedded...</div><div class='long'><p>A hashmap of <a href=\"#!/api/Kevlar.Collection-event-add\" rel=\"Kevlar.Collection-event-add\" class=\"docClass\">Kevlar.Collection.add</a>, <a href=\"#!/api/Kevlar.Collection-event-remove\" rel=\"Kevlar.Collection-event-remove\" class=\"docClass\">Kevlar.Collection.remove</a>, and <a href=\"#!/api/Kevlar.Collection-event-reorder\" rel=\"Kevlar.Collection-event-reorder\" class=\"docClass\">Kevlar.Collection.reorder</a> handlers for any\nembedded <a href=\"#!/api/Kevlar.Collection\" rel=\"Kevlar.Collection\" class=\"docClass\">Collections</a>. An \"embedded\" Collection is defined by a <a href=\"#!/api/Kevlar.attribute.CollectionAttribute\" rel=\"Kevlar.attribute.CollectionAttribute\" class=\"docClass\">Kevlar.attribute.CollectionAttribute</a> with\n<a href=\"#!/api/Kevlar.attribute.CollectionAttribute-cfg-embedded\" rel=\"Kevlar.attribute.CollectionAttribute-cfg-embedded\" class=\"docClass\">Kevlar.attribute.CollectionAttribute.embedded</a> set to <code>true</code>.</p>\n\n<p>This hashmap is keyed by the Attribute's name, and stores a Function reference as its value, which is the handler for the add/remove/reorder\nevents in the embedded Collection.</p>\n</div></div></div><div id='property-embeddedDataComponentChangeHandlers' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.Model'>Kevlar.Model</span><br/><a href='source/Model.html#Kevlar-Model-property-embeddedDataComponentChangeHandlers' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.Model-property-embeddedDataComponentChangeHandlers' class='name expandable'>embeddedDataComponentChangeHandlers</a><span> : Object</span><strong class='private signature'>private</strong></div><div class='description'><div class='short'>A hashmap of change handlers for any embedded DataComponents (which are defined by a Kevlar.attribute.DataComponentAt...</div><div class='long'><p>A hashmap of <a href=\"#!/api/Kevlar.Model-event-change\" rel=\"Kevlar.Model-event-change\" class=\"docClass\">change</a> handlers for any embedded DataComponents (which are defined by a <a href=\"#!/api/Kevlar.attribute.DataComponentAttribute\" rel=\"Kevlar.attribute.DataComponentAttribute\" class=\"docClass\">Kevlar.attribute.DataComponentAttribute</a> with\n<a href=\"#!/api/Kevlar.attribute.DataComponentAttribute-cfg-embedded\" rel=\"Kevlar.attribute.DataComponentAttribute-cfg-embedded\" class=\"docClass\">Kevlar.attribute.DataComponentAttribute.embedded</a> set to <code>true</code>).</p>\n\n<p>This hashmap is keyed by the Attribute's name, and stores a Function reference as its value, which is the handler for a change\nevent in the embedded DataComponent.</p>\n</div></div></div><div id='property-id' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.Model'>Kevlar.Model</span><br/><a href='source/Model.html#Kevlar-Model-property-id' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.Model-property-id' class='name expandable'>id</a><span> : String</span><strong class='private signature'>private</strong></div><div class='description'><div class='short'>(readonly)\nThe id for the Model. ...</div><div class='long'><p>(readonly)\nThe id for the Model. This property is set when the attribute specified by the <a href=\"#!/api/Kevlar.Model-cfg-idAttribute\" rel=\"Kevlar.Model-cfg-idAttribute\" class=\"docClass\">idAttribute</a> config\nis <a href=\"#!/api/Kevlar.Model-method-set\" rel=\"Kevlar.Model-method-set\" class=\"docClass\">set</a>.</p>\n\n<p>*** Note: This property is here solely to maintain compatibility with Backbone's Collection, and should\nnot be accessed or used, as it will most likely be removed in the future.</p>\n</div></div></div><div id='property-modifiedData' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.Model'>Kevlar.Model</span><br/><a href='source/Model.html#Kevlar-Model-property-modifiedData' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.Model-property-modifiedData' class='name expandable'>modifiedData</a><span> : Object</span><strong class='private signature'>private</strong></div><div class='description'><div class='short'>A hash that serves two functions:\n\n1) Properties are set to it when an attribute is modified. ...</div><div class='long'><p>A hash that serves two functions:</p>\n\n<p>1) Properties are set to it when an attribute is modified. The property name is the attribute <a href=\"#!/api/Kevlar.attribute.Attribute-cfg-name\" rel=\"Kevlar.attribute.Attribute-cfg-name\" class=\"docClass\">Kevlar.attribute.Attribute.name</a>.\n   This allows it to be used to determine which attributes have been modified.\n2) The <em>original</em> (non-committed) data of the attribute (before it was <a href=\"#!/api/Kevlar.Model-method-set\" rel=\"Kevlar.Model-method-set\" class=\"docClass\">set</a>) is stored as the value of the\n   property. When rolling back changes (via <a href=\"#!/api/Kevlar.Model-method-rollback\" rel=\"Kevlar.Model-method-rollback\" class=\"docClass\">rollback</a>), these values are copied back onto the <a href=\"#!/api/Kevlar.Model\" rel=\"Kevlar.Model\" class=\"docClass\">data</a> object\n   to overwrite the data to be rolled back.</p>\n\n<p>Went back and forth with naming this <code>originalData</code> and <code>modifiedData</code>, because it stores original data, but is used\nto determine which data is modified...</p>\n</div></div></div></div><div class='subsection'><div class='definedBy'>Defined By</div><h4 class='members-subtitle'>Static Properties</h3><div id='static-property-__Kevlar_modelTypeId' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.Model'>Kevlar.Model</span><br/><a href='source/Model.html#Kevlar-Model-static-property-__Kevlar_modelTypeId' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.Model-static-property-__Kevlar_modelTypeId' class='name expandable'>__Kevlar_modelTypeId</a><span> : Number</span><strong class='private signature'>private</strong><strong class='static signature'>static</strong></div><div class='description'><div class='short'>A static property that is unique to each Kevlar.Model subclass, which uniquely identifies the subclass. ...</div><div class='long'><p>A static property that is unique to each <a href=\"#!/api/Kevlar.Model\" rel=\"Kevlar.Model\" class=\"docClass\">Kevlar.Model</a> subclass, which uniquely identifies the subclass.\nThis is used as part of the Model cache, where it is determined if a Model instance already exists\nif two models are of the same type (i.e. have the same __Kevlar_modelTypeId), and instance id.</p>\n</div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-constructor' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.Model'>Kevlar.Model</span><br/><a href='source/Model.html#Kevlar-Model-method-constructor' target='_blank' class='view-source'>view source</a></div><strong class='new-keyword'>new</strong><a href='#!/api/Kevlar.Model-method-constructor' class='name expandable'>Kevlar.Model</a>( <span class='pre'>[Object data]</span> ) : Object</div><div class='description'><div class='short'>Creates a new Model instance. ...</div><div class='long'><p>Creates a new Model instance.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>data</span> : Object (optional)<div class='sub-desc'><p>Any initial data for the <a href=\"#!/api/Kevlar.Model-cfg-attributes\" rel=\"Kevlar.Model-cfg-attributes\" class=\"docClass\">attributes</a>, specified in an object (hash map). See <a href=\"#!/api/Kevlar.Model-method-set\" rel=\"Kevlar.Model-method-set\" class=\"docClass\">set</a>.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-clone' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.Model'>Kevlar.Model</span><br/><a href='source/Model.html#Kevlar-Model-method-clone' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.Model-method-clone' class='name expandable'>clone</a>( <span class='pre'>[Mixed id]</span> ) : <a href=\"#!/api/Kevlar.Model\" rel=\"Kevlar.Model\" class=\"docClass\">Kevlar.Model</a></div><div class='description'><div class='short'>Creates a clone of the Model, by copying its instance data. ...</div><div class='long'><p>Creates a clone of the Model, by copying its instance data. Note that the cloned model will <em>not</em> have a value\nfor its <a href=\"#!/api/Kevlar.Model-cfg-idAttribute\" rel=\"Kevlar.Model-cfg-idAttribute\" class=\"docClass\">idAttribute</a> (as it is a new model, and multiple models of the same type cannot exist with\nthe same id). You may optionally provide a new id for the clone with the <code>id</code> parameter.</p>\n\n<p>Note: This is a very early, alpha version of the method, where the final version will most likely\naccount for embedded models, while copying embedded models and other such nested data. Will also handle\ncircular dependencies. I don't recommend using it just yet.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>id</span> : Mixed (optional)<div class='sub-desc'><p>A new id for the Model. Defaults to undefined.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Kevlar.Model\" rel=\"Kevlar.Model\" class=\"docClass\">Kevlar.Model</a></span><div class='sub-desc'><p>The new Model instance, which is a clone of the Model this method was called on.</p>\n</div></li></ul></div></div></div><div id='method-commit' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.Model'>Kevlar.Model</span><br/><a href='source/Model.html#Kevlar-Model-method-commit' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.Model-method-commit' class='name expandable'>commit</a>( <span class='pre'></span> )</div><div class='description'><div class='short'>Commits dirty attributes' data. ...</div><div class='long'><p>Commits dirty attributes' data. Data can no longer be reverted after a commit has been performed. Note: When developing with a <a href=\"#!/api/Kevlar.Model-cfg-persistenceProxy\" rel=\"Kevlar.Model-cfg-persistenceProxy\" class=\"docClass\">persistenceProxy</a>,\nthis method should normally not need to be called explicitly, as it will be called upon the successful persistence of the Model's data\nto the server.</p>\n\n<p>@override</p>\n<p>Overrides: <a href='#!/api/Kevlar.DataComponent-method-commit' rel='Kevlar.DataComponent-method-commit' class='docClass'>Kevlar.DataComponent.commit</a></p></div></div></div><div id='method-destroy' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.Model'>Kevlar.Model</span><br/><a href='source/Model.html#Kevlar-Model-method-destroy' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.Model-method-destroy' class='name expandable'>destroy</a>( <span class='pre'>[Object options]</span> )</div><div class='description'><div class='short'>Destroys the Model on the backend, using the configured persistenceProxy. ...</div><div class='long'><p>Destroys the Model on the backend, using the configured <a href=\"#!/api/Kevlar.Model-cfg-persistenceProxy\" rel=\"Kevlar.Model-cfg-persistenceProxy\" class=\"docClass\">persistenceProxy</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>options</span> : Object (optional)<div class='sub-desc'><p>An object which may contain the following properties:</p>\n<ul><li><span class='pre'>async</span> : Boolean (optional)<div class='sub-desc'><p>True to make the request asynchronous, false to make it synchronous.</p>\n<p>Defaults to: <code>true</code></p></div></li><li><span class='pre'>success</span> : Function (optional)<div class='sub-desc'><p>Function to call if the destroy is successful.</p>\n</div></li><li><span class='pre'>error</span> : Function (optional)<div class='sub-desc'><p>Function to call if the destroy fails.</p>\n</div></li><li><span class='pre'>complete</span> : Function (optional)<div class='sub-desc'><p>Function to call when the operation is complete, regardless of a success or fail state.</p>\n</div></li><li><span class='pre'>scope</span> : Object (optional)<div class='sub-desc'><p>The object to call the <code>success</code>, <code>error</code>, and <code>complete</code> callbacks in. This may also\n  be provided as <code>context</code> if you prefer.</p>\n<p>Defaults to: <code>window</code></p></div></li></ul></div></li></ul></div></div></div><div id='method-fetch' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.Model'>Kevlar.Model</span><br/><a href='source/Model.html#Kevlar-Model-method-fetch' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.Model-method-fetch' class='name expandable'>fetch</a>( <span class='pre'></span> )</div><div class='description'><div class='short'>Alias of load. ...</div><div class='long'><p>Alias of <a href=\"#!/api/Kevlar.Model-method-load\" rel=\"Kevlar.Model-method-load\" class=\"docClass\">load</a>. See <a href=\"#!/api/Kevlar.Model-method-load\" rel=\"Kevlar.Model-method-load\" class=\"docClass\">load</a> for description and arguments.</p>\n</div></div></div><div id='method-get' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.Model'>Kevlar.Model</span><br/><a href='source/Model.html#Kevlar-Model-method-get' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.Model-method-get' class='name expandable'>get</a>( <span class='pre'>String attributeName</span> ) : Mixed</div><div class='description'><div class='short'>Retrieves the value for the attribute given by attributeName. ...</div><div class='long'><p>Retrieves the value for the attribute given by <code>attributeName</code>. If the <a href=\"#!/api/Kevlar.attribute.Attribute\" rel=\"Kevlar.attribute.Attribute\" class=\"docClass\">Attribute</a> has a\n<a href=\"#!/api/Kevlar.attribute.Attribute-cfg-get\" rel=\"Kevlar.attribute.Attribute-cfg-get\" class=\"docClass\">get</a> function defined, that function will be called, and its return value\nwill be used as the return of this method.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>attributeName</span> : String<div class='sub-desc'><p>The name of the Attribute whose value to retieve.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Mixed</span><div class='sub-desc'><p>The value of the attribute returned by the Attribute's <a href=\"#!/api/Kevlar.attribute.Attribute-cfg-get\" rel=\"Kevlar.attribute.Attribute-cfg-get\" class=\"docClass\">get</a> function (if\none exists), or the underlying value of the attribute. Will return undefined if there is no <a href=\"#!/api/Kevlar.attribute.Attribute-cfg-get\" rel=\"Kevlar.attribute.Attribute-cfg-get\" class=\"docClass\">get</a>\nfunction, and the value has never been set.</p>\n</div></li></ul></div></div></div><div id='method-getAttributes' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.Model'>Kevlar.Model</span><br/><a href='source/Model.html#Kevlar-Model-method-getAttributes' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.Model-method-getAttributes' class='name expandable'>getAttributes</a>( <span class='pre'></span> ) : Object</div><div class='description'><div class='short'>Retrieves the Attribute objects that are present for the Model, in an object (hashmap) where the keys\nare the Attribu...</div><div class='long'><p>Retrieves the Attribute objects that are present for the Model, in an object (hashmap) where the keys\nare the Attribute names, and the values are the <a href=\"#!/api/Kevlar.attribute.Attribute\" rel=\"Kevlar.attribute.Attribute\" class=\"docClass\">Kevlar.attribute.Attribute</a> objects themselves.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-getChanges' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.Model'>Kevlar.Model</span><br/><a href='source/Model.html#Kevlar-Model-method-getChanges' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.Model-method-getChanges' class='name expandable'>getChanges</a>( <span class='pre'>[Object options]</span> ) : Object</div><div class='description'><div class='short'>Retrieves the values for all of the attributes in the Model whose values have been changed since\nthe last commit or r...</div><div class='long'><p>Retrieves the values for all of the <a href=\"#!/api/Kevlar.attribute.Attribute\" rel=\"Kevlar.attribute.Attribute\" class=\"docClass\">attributes</a> in the Model whose values have been changed since\nthe last <a href=\"#!/api/Kevlar.Model-method-commit\" rel=\"Kevlar.Model-method-commit\" class=\"docClass\">commit</a> or <a href=\"#!/api/Kevlar.Model-method-rollback\" rel=\"Kevlar.Model-method-rollback\" class=\"docClass\">rollback</a>.</p>\n\n<p>The Model attributes are retrieved via the <a href=\"#!/api/Kevlar.Model-method-get\" rel=\"Kevlar.Model-method-get\" class=\"docClass\">get</a> method, to pre-process the data before it is returned in the final hash,\nunless the <code>raw</code> option is set to true, in which case the Model attributes are retrieved via <a href=\"#!/api/Kevlar.Model-method-raw\" rel=\"Kevlar.Model-method-raw\" class=\"docClass\">raw</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>options</span> : Object (optional)<div class='sub-desc'><p>An object (hash) of options to change the behavior of this method. This object is sent to\n  the <a href=\"#!/api/Kevlar.data.NativeObjectConverter-method-convert\" rel=\"Kevlar.data.NativeObjectConverter-method-convert\" class=\"docClass\">NativeObjectConverter's convert method</a>, and accepts all of the options\n  that the <a href=\"#!/api/Kevlar.data.NativeObjectConverter-method-convert\" rel=\"Kevlar.data.NativeObjectConverter-method-convert\" class=\"docClass\">Kevlar.data.NativeObjectConverter.convert</a> method does. See that method for details.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>A hash of the attributes that have been changed since the last <a href=\"#!/api/Kevlar.Model-method-commit\" rel=\"Kevlar.Model-method-commit\" class=\"docClass\">commit</a> or <a href=\"#!/api/Kevlar.Model-method-rollback\" rel=\"Kevlar.Model-method-rollback\" class=\"docClass\">rollback</a>.\n  The hash's property names are the attribute names, and the hash's values are the new values.</p>\n</div></li></ul></div></div></div><div id='method-getClientId' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Kevlar.DataComponent' rel='Kevlar.DataComponent' class='defined-in docClass'>Kevlar.DataComponent</a><br/><a href='source/DataComponent.html#Kevlar-DataComponent-method-getClientId' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.DataComponent-method-getClientId' class='name expandable'>getClientId</a>( <span class='pre'></span> ) : String</div><div class='description'><div class='short'>Retrieves the DataComponent's unique clientId. ...</div><div class='long'><p>Retrieves the DataComponent's unique <a href=\"#!/api/Kevlar.DataComponent-property-clientId\" rel=\"Kevlar.DataComponent-property-clientId\" class=\"docClass\">clientId</a>.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>The DataComponent's unique <a href=\"#!/api/Kevlar.DataComponent-property-clientId\" rel=\"Kevlar.DataComponent-property-clientId\" class=\"docClass\">clientId</a>.</p>\n</div></li></ul></div></div></div><div id='method-getData' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.Model'>Kevlar.Model</span><br/><a href='source/Model.html#Kevlar-Model-method-getData' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.Model-method-getData' class='name expandable'>getData</a>( <span class='pre'>[Object options]</span> ) : Object</div><div class='description'><div class='short'>Retrieves the values for all of the attributes in the Model. ...</div><div class='long'><p>Retrieves the values for all of the attributes in the Model. The Model attributes are retrieved via the <a href=\"#!/api/Kevlar.Model-method-get\" rel=\"Kevlar.Model-method-get\" class=\"docClass\">get</a> method,\nto pre-process the data before it is returned in the final hash, unless the <code>raw</code> option is set to true,\nin which case the Model attributes are retrieved via <a href=\"#!/api/Kevlar.Model-method-raw\" rel=\"Kevlar.Model-method-raw\" class=\"docClass\">raw</a>.</p>\n\n<p>@override</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>options</span> : Object (optional)<div class='sub-desc'><p>An object (hash) of options to change the behavior of this method. This object is sent to\n  the <a href=\"#!/api/Kevlar.data.NativeObjectConverter-method-convert\" rel=\"Kevlar.data.NativeObjectConverter-method-convert\" class=\"docClass\">NativeObjectConverter's convert method</a>, and accepts all of the options\n  that the <a href=\"#!/api/Kevlar.data.NativeObjectConverter-method-convert\" rel=\"Kevlar.data.NativeObjectConverter-method-convert\" class=\"docClass\">Kevlar.data.NativeObjectConverter.convert</a> method does. See that method for details.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>A hash of the data, where the property names are the keys, and the values are the <a href=\"#!/api/Kevlar.attribute.Attribute\" rel=\"Kevlar.attribute.Attribute\" class=\"docClass\">Attribute</a> values.</p>\n</div></li></ul><p>Overrides: <a href='#!/api/Kevlar.DataComponent-method-getData' rel='Kevlar.DataComponent-method-getData' class='docClass'>Kevlar.DataComponent.getData</a></p></div></div></div><div id='method-getDefault' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.Model'>Kevlar.Model</span><br/><a href='source/Model.html#Kevlar-Model-method-getDefault' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.Model-method-getDefault' class='name expandable'>getDefault</a>( <span class='pre'>String attributeName</span> ) : Mixed</div><div class='description'><div class='short'>Returns the default value specified for an Attribute. ...</div><div class='long'><p>Returns the default value specified for an Attribute.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>attributeName</span> : String<div class='sub-desc'><p>The attribute name to retrieve the default value for.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Mixed</span><div class='sub-desc'><p>The default value for the attribute.</p>\n</div></li></ul></div></div></div><div id='method-getEmbeddedDataComponentAttributes' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.Model'>Kevlar.Model</span><br/><a href='source/Model.html#Kevlar-Model-method-getEmbeddedDataComponentAttributes' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.Model-method-getEmbeddedDataComponentAttributes' class='name expandable'>getEmbeddedDataComponentAttributes</a>( <span class='pre'></span> ) : <a href=\"#!/api/Kevlar.attribute.DataComponentAttribute\" rel=\"Kevlar.attribute.DataComponentAttribute\" class=\"docClass\">Kevlar.attribute.DataComponentAttribute</a>[]<strong class='private signature'>private</strong></div><div class='description'><div class='short'>Retrieves an array of the attributes that are DataComponentAttributes which\nare also Kevlar.attribute.DataComponentAt...</div><div class='long'><p>Retrieves an array of the attributes that are <a href=\"#!/api/Kevlar.attribute.DataComponentAttribute\" rel=\"Kevlar.attribute.DataComponentAttribute\" class=\"docClass\">DataComponentAttributes</a> which\nare also <a href=\"#!/api/Kevlar.attribute.DataComponentAttribute-cfg-embedded\" rel=\"Kevlar.attribute.DataComponentAttribute-cfg-embedded\" class=\"docClass\">Kevlar.attribute.DataComponentAttribute.embedded</a>. This is a convenience method that supports the methods which\nuse the embedded DataComponentAttributes.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Kevlar.attribute.DataComponentAttribute\" rel=\"Kevlar.attribute.DataComponentAttribute\" class=\"docClass\">Kevlar.attribute.DataComponentAttribute</a>[]</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-getId' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.Model'>Kevlar.Model</span><br/><a href='source/Model.html#Kevlar-Model-method-getId' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.Model-method-getId' class='name expandable'>getId</a>( <span class='pre'></span> ) : Mixed</div><div class='description'><div class='short'>Retrieves the ID for the Model. ...</div><div class='long'><p>Retrieves the ID for the Model. This uses the configured <a href=\"#!/api/Kevlar.Model-cfg-idAttribute\" rel=\"Kevlar.Model-cfg-idAttribute\" class=\"docClass\">idAttribute</a> to retrieve\nthe correct ID attribute for the Model.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Mixed</span><div class='sub-desc'><p>The ID for the Model.</p>\n</div></li></ul></div></div></div><div id='method-getIdAttribute' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.Model'>Kevlar.Model</span><br/><a href='source/Model.html#Kevlar-Model-method-getIdAttribute' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.Model-method-getIdAttribute' class='name expandable'>getIdAttribute</a>( <span class='pre'></span> ) : <a href=\"#!/api/Kevlar.attribute.Attribute\" rel=\"Kevlar.attribute.Attribute\" class=\"docClass\">Kevlar.attribute.Attribute</a></div><div class='description'><div class='short'>Retrieves the \"ID attribute\" for the Model, if there is a valid id attribute. ...</div><div class='long'><p>Retrieves the \"ID attribute\" for the Model, if there is a valid id attribute. The Model has a valid ID attribute if there exists\nan attribute which is referenced by the <a href=\"#!/api/Kevlar.Model-cfg-idAttribute\" rel=\"Kevlar.Model-cfg-idAttribute\" class=\"docClass\">idAttribute</a> config. Otherwise, returns null.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Kevlar.attribute.Attribute\" rel=\"Kevlar.attribute.Attribute\" class=\"docClass\">Kevlar.attribute.Attribute</a></span><div class='sub-desc'><p>The Attribute that represents the ID attribute, or null if there is no valid ID attribute.</p>\n</div></li></ul></div></div></div><div id='method-getIdAttributeName' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.Model'>Kevlar.Model</span><br/><a href='source/Model.html#Kevlar-Model-method-getIdAttributeName' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.Model-method-getIdAttributeName' class='name expandable'>getIdAttributeName</a>( <span class='pre'></span> ) : String</div><div class='description'><div class='short'>Retrieves the name of the \"ID attribute\" for the Model. ...</div><div class='long'><p>Retrieves the name of the \"ID attribute\" for the Model. This will be the attribute referenced by the <a href=\"#!/api/Kevlar.Model-cfg-idAttribute\" rel=\"Kevlar.Model-cfg-idAttribute\" class=\"docClass\">idAttribute</a>\nconfig.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>The name of the \"ID attribute\".</p>\n</div></li></ul></div></div></div><div id='method-getPersistenceProxy' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.Model'>Kevlar.Model</span><br/><a href='source/Model.html#Kevlar-Model-method-getPersistenceProxy' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.Model-method-getPersistenceProxy' class='name expandable'>getPersistenceProxy</a>( <span class='pre'></span> ) : <a href=\"#!/api/Kevlar.persistence.Proxy\" rel=\"Kevlar.persistence.Proxy\" class=\"docClass\">Kevlar.persistence.Proxy</a></div><div class='description'><div class='short'>Gets the persistenceProxy that is currently configured for this Model. ...</div><div class='long'><p>Gets the <a href=\"#!/api/Kevlar.Model-cfg-persistenceProxy\" rel=\"Kevlar.Model-cfg-persistenceProxy\" class=\"docClass\">persistenceProxy</a> that is currently configured for this Model. Note that\nthe same persistenceProxy instance is shared between all instances of the model.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Kevlar.persistence.Proxy\" rel=\"Kevlar.persistence.Proxy\" class=\"docClass\">Kevlar.persistence.Proxy</a></span><div class='sub-desc'><p>The persistenceProxy, or null if there is no persistenceProxy currently set.</p>\n</div></li></ul></div></div></div><div id='method-has' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.Model'>Kevlar.Model</span><br/><a href='source/Model.html#Kevlar-Model-method-has' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.Model-method-has' class='name expandable'>has</a>( <span class='pre'>String attributeName</span> ) : Boolean</div><div class='description'><div class='short'>Determines if the Model has a given attribute (attribute). ...</div><div class='long'><p>Determines if the Model has a given attribute (attribute).</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>attributeName</span> : String<div class='sub-desc'><p>The name of the attribute (attribute) name to test for.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True if the Model has the given attribute name.</p>\n</div></li></ul></div></div></div><div id='method-hasIdAttribute' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.Model'>Kevlar.Model</span><br/><a href='source/Model.html#Kevlar-Model-method-hasIdAttribute' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.Model-method-hasIdAttribute' class='name expandable'>hasIdAttribute</a>( <span class='pre'></span> ) : Boolean</div><div class='description'><div class='short'>Determines if the Model has a valid idAttribute. ...</div><div class='long'><p>Determines if the Model has a valid <a href=\"#!/api/Kevlar.Model-cfg-idAttribute\" rel=\"Kevlar.Model-cfg-idAttribute\" class=\"docClass\">idAttribute</a>. Will return true if there is an <a href=\"#!/api/Kevlar.Model-cfg-attributes\" rel=\"Kevlar.Model-cfg-attributes\" class=\"docClass\">attribute</a>\nthat is referenced by the <a href=\"#!/api/Kevlar.Model-cfg-idAttribute\" rel=\"Kevlar.Model-cfg-idAttribute\" class=\"docClass\">idAttribute</a>, or false otherwise.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-initialize' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.Model'>Kevlar.Model</span><br/><a href='source/Model.html#Kevlar-Model-method-initialize' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.Model-method-initialize' class='name expandable'>initialize</a>( <span class='pre'></span> )<strong class='protected signature'>protected</strong></div><div class='description'><div class='short'>Hook method for subclasses to initialize themselves. ...</div><div class='long'><p>Hook method for subclasses to initialize themselves. This method should be overridden in subclasses to\nprovide any model-specific initialization.</p>\n\n<p>Note that it is good practice to always call the superclass <code>initialize</code> method from within yours (even if\nyour class simply extends <a href=\"#!/api/Kevlar.Model\" rel=\"Kevlar.Model\" class=\"docClass\">Kevlar.Model</a>, which has no <code>initialize</code> implementation itself). This is to future proof it\nfrom being moved under another superclass, or if there is ever an implementation made in this class.</p>\n\n<p>Ex:</p>\n\n<pre><code>MyModel = Kevlar.Model.extend( {\n    initialize : function() {\n        MyModel.superclass.initialize.apply( this, arguments );   // or could be MyModel.__super__.initialize.apply( this, arguments );\n\n        // my initialization logic goes here\n    }\n}\n</code></pre>\n</div></div></div><div id='method-isDirty' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.Model'>Kevlar.Model</span><br/><a href='source/Model.html#Kevlar-Model-method-isDirty' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.Model-method-isDirty' class='name expandable'>isDirty</a>( <span class='pre'></span> ) : Boolean</div><div class='description'><div class='short'>Determines if the Model currently has un-committed (i.e. ...</div><div class='long'><p>Determines if the Model currently has un-committed (i.e. changed) data.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-isModified' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.Model'>Kevlar.Model</span><br/><a href='source/Model.html#Kevlar-Model-method-isModified' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.Model-method-isModified' class='name expandable'>isModified</a>( <span class='pre'>[String attributeName]</span> ) : Boolean</div><div class='description'><div class='short'>Determines if any attribute(s) in the model are modified, or if a given attribute has been modified, since the last\nc...</div><div class='long'><p>Determines if any attribute(s) in the model are modified, or if a given attribute has been modified, since the last\n<a href=\"#!/api/Kevlar.Model-method-commit\" rel=\"Kevlar.Model-method-commit\" class=\"docClass\">commit</a> or <a href=\"#!/api/Kevlar.Model-method-rollback\" rel=\"Kevlar.Model-method-rollback\" class=\"docClass\">rollback</a>.</p>\n\n<p>@override</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>attributeName</span> : String (optional)<div class='sub-desc'><p>Provide this argument to test if a particular attribute has been modified. If this is not\n  provided, the model itself will be checked to see if there are any modified attributes.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True if the attribute has been modified, false otherwise.</p>\n</div></li></ul><p>Overrides: <a href='#!/api/Kevlar.DataComponent-method-isModified' rel='Kevlar.DataComponent-method-isModified' class='docClass'>Kevlar.DataComponent.isModified</a></p></div></div></div><div id='method-isNew' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.Model'>Kevlar.Model</span><br/><a href='source/Model.html#Kevlar-Model-method-isNew' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.Model-method-isNew' class='name expandable'>isNew</a>( <span class='pre'></span> ) : Boolean</div><div class='description'><div class='short'>Determines if the Model is a new model, and has not yet been persisted to the server. ...</div><div class='long'><p>Determines if the Model is a new model, and has not yet been persisted to the server.\nIt is a new Model if it lacks an id.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True if the model is new, false otherwise.</p>\n</div></li></ul></div></div></div><div id='method-load' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.Model'>Kevlar.Model</span><br/><a href='source/Model.html#Kevlar-Model-method-load' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.Model-method-load' class='name expandable'>load</a>( <span class='pre'>[Object options]</span> )</div><div class='description'><div class='short'>Loads the Model data from the server, using the configured persistenceProxy. ...</div><div class='long'><p>Loads the Model data from the server, using the configured <a href=\"#!/api/Kevlar.Model-cfg-persistenceProxy\" rel=\"Kevlar.Model-cfg-persistenceProxy\" class=\"docClass\">persistenceProxy</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>options</span> : Object (optional)<div class='sub-desc'><p>An object which may contain the following properties:</p>\n<ul><li><span class='pre'>async</span> : Boolean (optional)<div class='sub-desc'><p>True to make the request asynchronous, false to make it synchronous.</p>\n<p>Defaults to: <code>true</code></p></div></li><li><span class='pre'>success</span> : Function (optional)<div class='sub-desc'><p>Function to call if the save is successful.</p>\n</div></li><li><span class='pre'>failure</span> : Function (optional)<div class='sub-desc'><p>Function to call if the save fails.</p>\n</div></li><li><span class='pre'>complete</span> : Function (optional)<div class='sub-desc'><p>Function to call when the operation is complete, regardless of a success or fail state.</p>\n</div></li><li><span class='pre'>scope</span> : Object (optional)<div class='sub-desc'><p>The object to call the <code>success</code>, <code>failure</code>, and <code>complete</code> callbacks in.</p>\n<p>Defaults to: <code>window</code></p></div></li></ul></div></li></ul></div></div></div><div id='method-onEmbeddedCollectionAddRemoveReorder' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.Model'>Kevlar.Model</span><br/><a href='source/Model.html#Kevlar-Model-method-onEmbeddedCollectionAddRemoveReorder' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.Model-method-onEmbeddedCollectionAddRemoveReorder' class='name expandable'>onEmbeddedCollectionAddRemoveReorder</a>( <span class='pre'>String attributeName, <a href=\"#!/api/Kevlar.Collection\" rel=\"Kevlar.Collection\" class=\"docClass\">Kevlar.Collection</a> collection</span> )<strong class='private signature'>private</strong></div><div class='description'><div class='short'>Method that responds to an embedded Collection, and fires a change event in this model\nwhen a Collection is added to,...</div><div class='long'><p>Method that responds to an embedded <a href=\"#!/api/Kevlar.Collection\" rel=\"Kevlar.Collection\" class=\"docClass\">Collection</a>, and fires a change event in this model\nwhen a Collection is <a href=\"#!/api/Kevlar.Collection-event-add\" rel=\"Kevlar.Collection-event-add\" class=\"docClass\">added to</a>, <a href=\"#!/api/Kevlar.Collection-event-remove\" rel=\"Kevlar.Collection-event-remove\" class=\"docClass\">removed from</a>,\nof <a href=\"#!/api/Kevlar.Collection-event-reorder\" rel=\"Kevlar.Collection-event-reorder\" class=\"docClass\">reordered</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>attributeName</span> : String<div class='sub-desc'><p>The name of the attribute where the embedded Collection exists.</p>\n</div></li><li><span class='pre'>collection</span> : <a href=\"#!/api/Kevlar.Collection\" rel=\"Kevlar.Collection\" class=\"docClass\">Kevlar.Collection</a><div class='sub-desc'><p>The collection that fired the <a href=\"#!/api/Kevlar.Collection-event-add\" rel=\"Kevlar.Collection-event-add\" class=\"docClass\">Kevlar.Collection.add</a>,\n  <a href=\"#!/api/Kevlar.Collection-event-remove\" rel=\"Kevlar.Collection-event-remove\" class=\"docClass\">Kevlar.Collection.remove</a>, or <a href=\"#!/api/Kevlar.Collection-event-reorder\" rel=\"Kevlar.Collection-event-reorder\" class=\"docClass\">Kevlar.Collection.reorder</a> event.</p>\n</div></li></ul></div></div></div><div id='method-onEmbeddedDataComponentChange' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.Model'>Kevlar.Model</span><br/><a href='source/Model.html#Kevlar-Model-method-onEmbeddedDataComponentChange' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.Model-method-onEmbeddedDataComponentChange' class='name expandable'>onEmbeddedDataComponentChange</a>( <span class='pre'>String attributeName, <a href=\"#!/api/Kevlar.Collection\" rel=\"Kevlar.Collection\" class=\"docClass\">Kevlar.Collection</a> childCollection, <a href=\"#!/api/Kevlar.Model\" rel=\"Kevlar.Model\" class=\"docClass\">Kevlar.Model</a> childModel, String childModelAttr, Mixed newValue, Mixed oldValue, [Object childChangeData]</span> )<strong class='private signature'>private</strong></div><div class='description'><div class='short'>Handler for a change in an embedded model/collection. ...</div><div class='long'><p>Handler for a change in an embedded model/collection. Relays the embedded model's/collection's <a href=\"#!/api/Kevlar.Model-event-change\" rel=\"Kevlar.Model-event-change\" class=\"docClass\">change</a> events through this model.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>attributeName</span> : String<div class='sub-desc'><p>The attribute name in <em>this</em> model that stores the embedded model.</p>\n</div></li><li><span class='pre'>childCollection</span> : <a href=\"#!/api/Kevlar.Collection\" rel=\"Kevlar.Collection\" class=\"docClass\">Kevlar.Collection</a><div class='sub-desc'><p>The embedded child collection, if there is one at this level in the bubbling hierarchy.\n  Should be set to null otherwise.</p>\n</div></li><li><span class='pre'>childModel</span> : <a href=\"#!/api/Kevlar.Model\" rel=\"Kevlar.Model\" class=\"docClass\">Kevlar.Model</a><div class='sub-desc'><p>The embedded child model.</p>\n</div></li><li><span class='pre'>childModelAttr</span> : String<div class='sub-desc'><p>The attribute name of the changed attribute in the embedded model. When fired \"up the chain\"\n  from deeply nested models, this will accumulate into a dot-delimited path to the child model. Ex: \"parent.intermediate.child\".</p>\n</div></li><li><span class='pre'>newValue</span> : Mixed<div class='sub-desc'>\n</div></li><li><span class='pre'>oldValue</span> : Mixed<div class='sub-desc'>\n</div></li><li><span class='pre'>childChangeData</span> : Object (optional)<div class='sub-desc'><p>An object which holds information from the 'change' event of child DataComponents. This is a \"private\"\n  argument, and is only used for the event bubbling feature.</p>\n<ul><li><span class='pre'>pathToChangedAttr</span> : String (optional)<div class='sub-desc'><p>A string path to the changed attribute. This is a \"private\" argument, which is only used for\n  the event bubbling feature. Defaults to the value of <code>childModelAttr</code>.</p>\n</div></li><li><span class='pre'>origNewValue</span> : Mixed (optional)<div class='sub-desc'><p>The newValue from the original event in the deepest DataComponent.</p>\n<p>Defaults to: <code>newValue</code></p></div></li><li><span class='pre'>origOldValue</span> : Mixed (optional)<div class='sub-desc'><p>The oldValue from the original event in the deepest DataComponent.</p>\n<p>Defaults to: <code>oldValue</code></p></div></li><li><span class='pre'>embeddedDataComponents</span> : <a href=\"#!/api/Kevlar.Model\" rel=\"Kevlar.Model\" class=\"docClass\">Kevlar.Model</a>[] (optional)<div class='sub-desc'><p>An array of the nested models/collections that have fired a 'change' event below\n  this Model's event. This is a \"private\" argument, which is only used for this feature.</p>\n</div></li></ul></div></li></ul></div></div></div><div id='method-previous' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.Model'>Kevlar.Model</span><br/><a href='source/Model.html#Kevlar-Model-method-previous' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.Model-method-previous' class='name expandable'>previous</a>( <span class='pre'>String attributeName</span> )</div><div class='description'><div class='short'>For compatibility with Backbone's Collection, when it is called from Collection's _onModelEvent()\nmethod. ...</div><div class='long'><p>For compatibility with Backbone's Collection, when it is called from Collection's <code>_onModelEvent()</code>\nmethod. <code>_onModelEvent()</code> asks for the previous <code>id</code> of the Model when the id attribute changes,\nsuch as when a Model is created on the server. This method simply returns undefined for this purpose,\nbut if more compatibility is needed, it could return the original data for a given attribute (which is\na little different than Backbone's notion of \"previous\" data, which is the previous data from before any\ncurrent 'change' event).</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>attributeName</span> : String<div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-raw' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.Model'>Kevlar.Model</span><br/><a href='source/Model.html#Kevlar-Model-method-raw' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.Model-method-raw' class='name expandable'>raw</a>( <span class='pre'>String attributeName</span> ) : Mixed</div><div class='description'><div class='short'>Retrieves the raw value for the attribute given by attributeName. ...</div><div class='long'><p>Retrieves the <em>raw</em> value for the attribute given by <code>attributeName</code>. If the <a href=\"#!/api/Kevlar.attribute.Attribute\" rel=\"Kevlar.attribute.Attribute\" class=\"docClass\">Attributes</a> has a\n<a href=\"#!/api/Kevlar.attribute.Attribute-cfg-raw\" rel=\"Kevlar.attribute.Attribute-cfg-raw\" class=\"docClass\">raw</a> function defined, that function will be called, and its return value will be used\nby the return of this method. If not, the underlying data that is currently stored will be returned, bypassing any\n<a href=\"#!/api/Kevlar.attribute.Attribute-cfg-get\" rel=\"Kevlar.attribute.Attribute-cfg-get\" class=\"docClass\">get</a> function defined on the <a href=\"#!/api/Kevlar.attribute.Attribute\" rel=\"Kevlar.attribute.Attribute\" class=\"docClass\">Attribute</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>attributeName</span> : String<div class='sub-desc'><p>The name of the Attribute whose raw value to retieve.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Mixed</span><div class='sub-desc'><p>The value of the attribute returned by the Attribute's <a href=\"#!/api/Kevlar.attribute.Attribute-cfg-raw\" rel=\"Kevlar.attribute.Attribute-cfg-raw\" class=\"docClass\">raw</a> function (if\none exists), or the underlying value of the attribute. Will return undefined if there is no <a href=\"#!/api/Kevlar.attribute.Attribute-cfg-raw\" rel=\"Kevlar.attribute.Attribute-cfg-raw\" class=\"docClass\">raw</a>\nfunction, and the value has never been set.</p>\n</div></li></ul></div></div></div><div id='method-rollback' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.Model'>Kevlar.Model</span><br/><a href='source/Model.html#Kevlar-Model-method-rollback' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.Model-method-rollback' class='name expandable'>rollback</a>( <span class='pre'></span> )</div><div class='description'><div class='short'>Rolls back the Model attributes that have been changed since the last commit or rollback. ...</div><div class='long'><p>Rolls back the Model attributes that have been changed since the last commit or rollback.</p>\n\n<p>@override</p>\n<p>Overrides: <a href='#!/api/Kevlar.DataComponent-method-rollback' rel='Kevlar.DataComponent-method-rollback' class='docClass'>Kevlar.DataComponent.rollback</a></p></div></div></div><div id='method-save' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.Model'>Kevlar.Model</span><br/><a href='source/Model.html#Kevlar-Model-method-save' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.Model-method-save' class='name expandable'>save</a>( <span class='pre'>[Object options]</span> )</div><div class='description'><div class='short'>Persists the Model data to the backend, using the configured persistenceProxy. ...</div><div class='long'><p>Persists the Model data to the backend, using the configured <a href=\"#!/api/Kevlar.Model-cfg-persistenceProxy\" rel=\"Kevlar.Model-cfg-persistenceProxy\" class=\"docClass\">persistenceProxy</a>. If the request to persist the Model's data is successful,\nthe Model's data will be <a href=\"#!/api/Kevlar.Model-method-commit\" rel=\"Kevlar.Model-method-commit\" class=\"docClass\">committed</a> upon completion.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>options</span> : Object (optional)<div class='sub-desc'><p>An object which may contain the following properties:</p>\n<ul><li><span class='pre'>async</span> : Boolean (optional)<div class='sub-desc'><p>True to make the request asynchronous, false to make it synchronous.</p>\n<p>Defaults to: <code>true</code></p></div></li><li><span class='pre'>success</span> : Function (optional)<div class='sub-desc'><p>Function to call if the save is successful.</p>\n</div></li><li><span class='pre'>error</span> : Function (optional)<div class='sub-desc'><p>Function to call if the save fails.</p>\n</div></li><li><span class='pre'>complete</span> : Function (optional)<div class='sub-desc'><p>Function to call when the operation is complete, regardless of a success or fail state.</p>\n</div></li><li><span class='pre'>scope</span> : Object (optional)<div class='sub-desc'><p>The object to call the <code>success</code>, <code>error</code>, and <code>complete</code> callbacks in. This may also\n  be provided as <code>context</code> if you prefer.</p>\n<p>Defaults to: <code>window</code></p></div></li></ul></div></li></ul></div></div></div><div id='method-set' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.Model'>Kevlar.Model</span><br/><a href='source/Model.html#Kevlar-Model-method-set' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.Model-method-set' class='name expandable'>set</a>( <span class='pre'>String/Object attributeName, [Mixed newValue]</span> )</div><div class='description'><div class='short'>Sets the value for a Attribute given its name, and a value. ...</div><div class='long'><p>Sets the value for a <a href=\"#!/api/Kevlar.attribute.Attribute\" rel=\"Kevlar.attribute.Attribute\" class=\"docClass\">Attribute</a> given its <code>name</code>, and a <code>value</code>. For example, a call could be made as this:</p>\n\n<pre><code>model.set( 'attribute1', 'value1' );\n</code></pre>\n\n<p>As an alternative form, multiple valuse can be set at once by passing an Object into the first argument of this method. Ex:</p>\n\n<pre><code>model.set( { key1: 'value1', key2: 'value2' } );\n</code></pre>\n\n<p>Note that in this form, the method will ignore any property in the object (hash) that don't have associated Attributes.<br><br></p>\n\n<p>When attributes are set, their <a href=\"#!/api/Kevlar.attribute.Attribute-cfg-set\" rel=\"Kevlar.attribute.Attribute-cfg-set\" class=\"docClass\">Kevlar.attribute.Attribute.set</a> method is run, if they have one defined.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>attributeName</span> : String/Object<div class='sub-desc'><p>The attribute name for the Attribute to set, or an object (hash) of name/value pairs.</p>\n</div></li><li><span class='pre'>newValue</span> : Mixed (optional)<div class='sub-desc'><p>The value to set to the attribute. Required if the <code>attributeName</code> argument is a string (i.e. not a hash).</p>\n</div></li></ul></div></div></div><div id='method-setProxy' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.Model'>Kevlar.Model</span><br/><a href='source/Model.html#Kevlar-Model-method-setProxy' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.Model-method-setProxy' class='name expandable'>setProxy</a>( <span class='pre'><a href=\"#!/api/Kevlar.persistence.Proxy\" rel=\"Kevlar.persistence.Proxy\" class=\"docClass\">Kevlar.persistence.Proxy</a> persistenceProxy</span> )</div><div class='description'><div class='short'>Sets the persistenceProxy to use to persist the Model's data. ...</div><div class='long'><p>Sets the <a href=\"#!/api/Kevlar.Model-cfg-persistenceProxy\" rel=\"Kevlar.Model-cfg-persistenceProxy\" class=\"docClass\">persistenceProxy</a> to use to persist the Model's data. Note that this is set\nto the <em>prototype</em> of the Model, for use with all instances of the Model. Because\nof this, it is usually best to define the <a href=\"#!/api/Kevlar.Model-cfg-persistenceProxy\" rel=\"Kevlar.Model-cfg-persistenceProxy\" class=\"docClass\">persistenceProxy</a> on the prototype of a Model\nsubclass.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>persistenceProxy</span> : <a href=\"#!/api/Kevlar.persistence.Proxy\" rel=\"Kevlar.persistence.Proxy\" class=\"docClass\">Kevlar.persistence.Proxy</a><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-toJSON' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.Model'>Kevlar.Model</span><br/><a href='source/Model.html#Kevlar-Model-method-toJSON' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.Model-method-toJSON' class='name expandable'>toJSON</a>( <span class='pre'></span> )</div><div class='description'><div class='short'>Alias of getData, which is currently just for compatibility with\nBackbone's Collection. ...</div><div class='long'><p>Alias of <a href=\"#!/api/Kevlar.Model-method-getData\" rel=\"Kevlar.Model-method-getData\" class=\"docClass\">getData</a>, which is currently just for compatibility with\nBackbone's Collection. Do not use. Use <a href=\"#!/api/Kevlar.Model-method-getData\" rel=\"Kevlar.Model-method-getData\" class=\"docClass\">getData</a> instead.</p>\n</div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-event'>Events</h3><div class='subsection'><div id='event-change' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.Model'>Kevlar.Model</span><br/><a href='source/Model.html#Kevlar-Model-event-change' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.Model-event-change' class='name expandable'>change</a>( <span class='pre'><a href=\"#!/api/Kevlar.Model\" rel=\"Kevlar.Model\" class=\"docClass\">Kevlar.Model</a> model, String attributeName, Mixed newValue, Mixed oldValue</span> )</div><div class='description'><div class='short'>Fires when a Kevlar.attribute.Attribute in the Model has changed its value. ...</div><div class='long'><p>Fires when a <a href=\"#!/api/Kevlar.attribute.Attribute\" rel=\"Kevlar.attribute.Attribute\" class=\"docClass\">Kevlar.attribute.Attribute</a> in the Model has changed its value.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>model</span> : <a href=\"#!/api/Kevlar.Model\" rel=\"Kevlar.Model\" class=\"docClass\">Kevlar.Model</a><div class='sub-desc'><p>This Model instance.</p>\n</div></li><li><span class='pre'>attributeName</span> : String<div class='sub-desc'><p>The name of the attribute that was changed.</p>\n</div></li><li><span class='pre'>newValue</span> : Mixed<div class='sub-desc'><p>The new value, processed by the attribute's <a href=\"#!/api/Kevlar.attribute.Attribute-cfg-get\" rel=\"Kevlar.attribute.Attribute-cfg-get\" class=\"docClass\">get</a> function if one exists.</p>\n</div></li><li><span class='pre'>oldValue</span> : Mixed<div class='sub-desc'><p>The old (previous) value, processed by the attribute's <a href=\"#!/api/Kevlar.attribute.Attribute-cfg-get\" rel=\"Kevlar.attribute.Attribute-cfg-get\" class=\"docClass\">get</a> function if one exists.</p>\n</div></li></ul></div></div></div><div id='event-commit' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.Model'>Kevlar.Model</span><br/><a href='source/Model.html#Kevlar-Model-event-commit' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.Model-event-commit' class='name expandable'>commit</a>( <span class='pre'><a href=\"#!/api/Kevlar.Model\" rel=\"Kevlar.Model\" class=\"docClass\">Kevlar.Model</a> model</span> )</div><div class='description'><div class='short'>Fires when the data in the model is committed. ...</div><div class='long'><p>Fires when the data in the model is <a href=\"#!/api/Kevlar.Model-method-commit\" rel=\"Kevlar.Model-method-commit\" class=\"docClass\">committed</a>. This happens if the\n<a href=\"#!/api/Kevlar.Model-method-commit\" rel=\"Kevlar.Model-method-commit\" class=\"docClass\">commit</a> method is called, and after a successful <a href=\"#!/api/Kevlar.Model-method-save\" rel=\"Kevlar.Model-method-save\" class=\"docClass\">save</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>model</span> : <a href=\"#!/api/Kevlar.Model\" rel=\"Kevlar.Model\" class=\"docClass\">Kevlar.Model</a><div class='sub-desc'><p>This Model instance.</p>\n</div></li></ul></div></div></div><div id='event-destroy' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.Model'>Kevlar.Model</span><br/><a href='source/Model.html#Kevlar-Model-event-destroy' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.Model-event-destroy' class='name expandable'>destroy</a>( <span class='pre'><a href=\"#!/api/Kevlar.Model\" rel=\"Kevlar.Model\" class=\"docClass\">Kevlar.Model</a> model</span> )</div><div class='description'><div class='short'>Fires when the Model has been destroyed (via destroy). ...</div><div class='long'><p>Fires when the Model has been destroyed (via <a href=\"#!/api/Kevlar.Model-method-destroy\" rel=\"Kevlar.Model-method-destroy\" class=\"docClass\">destroy</a>).</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>model</span> : <a href=\"#!/api/Kevlar.Model\" rel=\"Kevlar.Model\" class=\"docClass\">Kevlar.Model</a><div class='sub-desc'><p>This Model instance.</p>\n</div></li></ul></div></div></div><div id='event-rollback' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.Model'>Kevlar.Model</span><br/><a href='source/Model.html#Kevlar-Model-event-rollback' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.Model-event-rollback' class='name expandable'>rollback</a>( <span class='pre'><a href=\"#!/api/Kevlar.Model\" rel=\"Kevlar.Model\" class=\"docClass\">Kevlar.Model</a> model</span> )</div><div class='description'><div class='short'>Fires when the data in the model is rolled back. ...</div><div class='long'><p>Fires when the data in the model is <a href=\"#!/api/Kevlar.Model-method-rollback\" rel=\"Kevlar.Model-method-rollback\" class=\"docClass\">rolled back</a>. This happens when the\n<a href=\"#!/api/Kevlar.Model-method-rollback\" rel=\"Kevlar.Model-method-rollback\" class=\"docClass\">rollback</a> method is called.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>model</span> : <a href=\"#!/api/Kevlar.Model\" rel=\"Kevlar.Model\" class=\"docClass\">Kevlar.Model</a><div class='sub-desc'><p>This Model instance.</p>\n</div></li></ul></div></div></div></div></div></div></div>"});