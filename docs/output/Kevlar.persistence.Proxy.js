Ext.data.JsonP.Kevlar_persistence_Proxy({"tagname":"class","name":"Kevlar.persistence.Proxy","extends":"Kevlar.util.Observable","mixins":[],"alternateClassNames":[],"aliases":{},"singleton":false,"requires":[],"uses":[],"code_type":"assignment","inheritable":false,"inheritdoc":null,"meta":{"abstract":true},"id":"class-Kevlar.persistence.Proxy","members":{"cfg":[{"name":"listeners","tagname":"cfg","owner":"Kevlar.util.Observable","meta":{},"id":"cfg-listeners"}],"property":[],"method":[{"name":"constructor","tagname":"method","owner":"Kevlar.util.Observable","meta":{},"id":"method-constructor"},{"name":"addEvents","tagname":"method","owner":"Kevlar.util.Observable","meta":{},"id":"method-addEvents"},{"name":"addListener","tagname":"method","owner":"Kevlar.util.Observable","meta":{},"id":"method-addListener"},{"name":"bind","tagname":"method","owner":"Kevlar.util.Observable","meta":{},"id":"method-bind"},{"name":"create","tagname":"method","owner":"Kevlar.persistence.Proxy","meta":{"abstract":true},"id":"method-create"},{"name":"destroy","tagname":"method","owner":"Kevlar.persistence.Proxy","meta":{"abstract":true},"id":"method-destroy"},{"name":"enableBubble","tagname":"method","owner":"Kevlar.util.Observable","meta":{},"id":"method-enableBubble"},{"name":"fireEvent","tagname":"method","owner":"Kevlar.util.Observable","meta":{},"id":"method-fireEvent"},{"name":"getBubbleTarget","tagname":"method","owner":"Kevlar.util.Observable","meta":{"protected":true},"id":"method-getBubbleTarget"},{"name":"hasListener","tagname":"method","owner":"Kevlar.util.Observable","meta":{},"id":"method-hasListener"},{"name":"on","tagname":"method","owner":"Kevlar.util.Observable","meta":{},"id":"method-on"},{"name":"purgeListeners","tagname":"method","owner":"Kevlar.util.Observable","meta":{},"id":"method-purgeListeners"},{"name":"read","tagname":"method","owner":"Kevlar.persistence.Proxy","meta":{"abstract":true},"id":"method-read"},{"name":"relayEvents","tagname":"method","owner":"Kevlar.util.Observable","meta":{},"id":"method-relayEvents"},{"name":"removeListener","tagname":"method","owner":"Kevlar.util.Observable","meta":{},"id":"method-removeListener"},{"name":"resumeEvents","tagname":"method","owner":"Kevlar.util.Observable","meta":{},"id":"method-resumeEvents"},{"name":"suspendEvents","tagname":"method","owner":"Kevlar.util.Observable","meta":{},"id":"method-suspendEvents"},{"name":"trigger","tagname":"method","owner":"Kevlar.util.Observable","meta":{},"id":"method-trigger"},{"name":"un","tagname":"method","owner":"Kevlar.util.Observable","meta":{},"id":"method-un"},{"name":"unbind","tagname":"method","owner":"Kevlar.util.Observable","meta":{},"id":"method-unbind"},{"name":"update","tagname":"method","owner":"Kevlar.persistence.Proxy","meta":{"abstract":true},"id":"method-update"}],"event":[{"name":"all","tagname":"event","owner":"Kevlar.util.Observable","meta":{},"id":"event-all"}],"css_var":[],"css_mixin":[]},"statics":{"cfg":[],"property":[{"name":"proxies","tagname":"property","owner":"Kevlar.persistence.Proxy","meta":{"private":true,"static":true},"id":"static-property-proxies"}],"method":[{"name":"create","tagname":"method","owner":"Kevlar.persistence.Proxy","meta":{"static":true},"id":"static-method-create"},{"name":"register","tagname":"method","owner":"Kevlar.persistence.Proxy","meta":{"static":true},"id":"static-method-register"}],"event":[],"css_var":[],"css_mixin":[]},"files":[{"filename":"Proxy.js","href":"Proxy.html#Kevlar-persistence-Proxy"}],"html_meta":{"abstract":null},"component":false,"superclasses":["Kevlar.util.Observable"],"subclasses":["Kevlar.persistence.RestProxy"],"mixedInto":[],"parentMixins":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'><a href='#!/api/Kevlar.util.Observable' rel='Kevlar.util.Observable' class='docClass'>Kevlar.util.Observable</a><div class='subclass '><strong>Kevlar.persistence.Proxy</strong></div></div><h4>Subclasses</h4><div class='dependency'><a href='#!/api/Kevlar.persistence.RestProxy' rel='Kevlar.persistence.RestProxy' class='docClass'>Kevlar.persistence.RestProxy</a></div><h4>Files</h4><div class='dependency'><a href='source/Proxy.html#Kevlar-persistence-Proxy' target='_blank'>Proxy.js</a></div></pre><div class='doc-contents'><p>Proxy is the base class for subclasses that perform CRUD (Create, Read, Update, and Delete) operations on the server.</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-cfg'>Config options</h3><div class='subsection'><div id='cfg-listeners' class='member first-child inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Kevlar.util.Observable' rel='Kevlar.util.Observable' class='defined-in docClass'>Kevlar.util.Observable</a><br/><a href='source/Observable.html#Kevlar-util-Observable-cfg-listeners' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.util.Observable-cfg-listeners' class='name expandable'>listeners</a><span> : Object</span></div><div class='description'><div class='short'>(optional)\nA config object containing one or more event handlers to be added to this object during initialization. ...</div><div class='long'><p>(optional)\nA config object containing one or more event handlers to be added to this object during initialization.<br/>\nThis should be a valid listeners config object as specified in the <a href=\"#!/api/Kevlar.util.Observable-method-addListener\" rel=\"Kevlar.util.Observable-method-addListener\" class=\"docClass\">addListener</a> example for attaching\nmultiple handlers at once.</p>\n</div></div></div></div></div><div class='members-section'><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div class='definedBy'>Defined By</div><h4 class='members-subtitle'>Static Properties</h3><div id='static-property-proxies' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.persistence.Proxy'>Kevlar.persistence.Proxy</span><br/><a href='source/Proxy.html#Kevlar-persistence-Proxy-static-property-proxies' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.persistence.Proxy-static-property-proxies' class='name expandable'>proxies</a><span> : Object</span><strong class='private signature'>private</strong><strong class='static signature'>static</strong></div><div class='description'><div class='short'>An object (hashmap) of persistence proxy name -> Proxy class key/value pairs, used to look up\na Proxy subclass by name. ...</div><div class='long'><p>An object (hashmap) of persistence proxy name -> Proxy class key/value pairs, used to look up\na Proxy subclass by name.</p>\n<p>Defaults to: <code>{}</code></p></div></div></div></div></div><div class='members-section'><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div class='definedBy'>Defined By</div><h4 class='members-subtitle'>Instance Methods</h3><div id='method-constructor' class='member first-child inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Kevlar.util.Observable' rel='Kevlar.util.Observable' class='defined-in docClass'>Kevlar.util.Observable</a><br/><a href='source/Observable.html#Kevlar-util-Observable-method-constructor' target='_blank' class='view-source'>view source</a></div><strong class='new-keyword'>new</strong><a href='#!/api/Kevlar.util.Observable-method-constructor' class='name expandable'>Kevlar.persistence.Proxy</a>( <span class='pre'></span> ) : Object</div><div class='description'><div class='short'>Instantiates a new Observable object. ...</div><div class='long'><p>Instantiates a new Observable object.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-addEvents' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Kevlar.util.Observable' rel='Kevlar.util.Observable' class='defined-in docClass'>Kevlar.util.Observable</a><br/><a href='source/Observable.html#Kevlar-util-Observable-method-addEvents' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.util.Observable-method-addEvents' class='name expandable'>addEvents</a>( <span class='pre'>Object/String o, String Optional</span> )</div><div class='description'><div class='short'>Adds the specified events to the list of events which this Observable may fire. ...</div><div class='long'><p>Adds the specified events to the list of events which this Observable may fire.\nUsage:</p>\n\n<pre><code>this.addEvents( 'storeloaded', 'storecleared' );\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>o</span> : Object/String<div class='sub-desc'><p>Either an object with event names as properties with a value of <code>true</code>\nor the first event name string if multiple event names are being passed as separate parameters.</p>\n</div></li><li><span class='pre'>Optional</span> : String<div class='sub-desc'><p>. Event name if multiple event names are being passed as separate parameters.</p>\n</div></li></ul></div></div></div><div id='method-addListener' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Kevlar.util.Observable' rel='Kevlar.util.Observable' class='defined-in docClass'>Kevlar.util.Observable</a><br/><a href='source/Observable.html#Kevlar-util-Observable-method-addListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.util.Observable-method-addListener' class='name expandable'>addListener</a>( <span class='pre'>String eventName, Function handler, [Object scope], [Object options]</span> )</div><div class='description'><div class='short'>Appends an event handler to this object. ...</div><div class='long'><p>Appends an event handler to this object.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>eventName</span> : String<div class='sub-desc'><p>The name of the event to listen for.</p>\n</div></li><li><span class='pre'>handler</span> : Function<div class='sub-desc'><p>The method the event invokes.</p>\n</div></li><li><span class='pre'>scope</span> : Object (optional)<div class='sub-desc'><p>The scope (<code>this</code> reference) in which the handler function is executed. <strong>If omitted, defaults to the object which fired the event.</strong></p>\n\n<p>Alternatively, a single options object may be provided:</p>\n</div></li><li><span class='pre'>options</span> : Object (optional)<div class='sub-desc'><p>An object containing handler configuration properties. This may contain any of the following properties:</p>\n<ul><li><span class='pre'>scope</span> : Object (optional)<div class='sub-desc'><p>The scope (<code>this</code> reference) in which the handler function is executed. <strong>If omitted, defaults to the object which fired the event.</strong></p>\n</div></li><li><span class='pre'>delay</span> : Number (optional)<div class='sub-desc'><p>The number of milliseconds to delay the invocation of the handler after the event fires.</p>\n</div></li><li><span class='pre'>single</span> : Boolean (optional)<div class='sub-desc'><p>True to add a handler to handle just the next firing of the event, and then remove itself.</p>\n</div></li><li><span class='pre'>buffer</span> : Number (optional)<div class='sub-desc'><p>Causes the handler to be scheduled to run in an <a href=\"#!/api/Kevlar.util.DelayedTask\" rel=\"Kevlar.util.DelayedTask\" class=\"docClass\">Kevlar.util.DelayedTask</a> delayed by the specified number of milliseconds.\n  If the event fires again within that time, the original handler is <em>not</em> invoked, but the new handler is scheduled in its place.</p>\n</div></li><li><span class='pre'>target</span> : <a href=\"#!/api/Kevlar.util.Observable\" rel=\"Kevlar.util.Observable\" class=\"docClass\">Kevlar.util.Observable</a> (optional)<div class='sub-desc'><p>Only call the handler if the event was fired on the target Observable, <em>not</em> if the event was bubbled up from a child\n  Observable.</p>\n\n<p><strong>Combining Options</strong>\nUsing the options argument, it is possible to combine different types of listeners:</p>\n\n<p>A delayed, one-time listener.</p>\n\n<pre><code>myDataView.on('click', this.onClick, this, {\n    single: true,\n    delay: 100\n});\n</code></pre>\n\n<p><strong>Attaching multiple handlers in 1 call</strong>\nThe method also allows for a single argument to be passed which is a config object containing properties\nwhich specify multiple handlers.</p>\n\n<pre><code>myGridPanel.on({\n    'click' : {\n        fn: this.onClick,\n        scope: this,\n        delay: 100\n    },\n    'mouseover' : {\n        fn: this.onMouseOver,\n        scope: this\n    },\n    'mouseout' : {\n        fn: this.onMouseOut,\n        scope: this\n    }\n});\n</code></pre>\n\n<p>Or a shorthand syntax:</p>\n\n<pre><code>myGridPanel.on( {\n    'click' : this.onClick,\n    'mouseover' : this.onMouseOver,\n    'mouseout' : this.onMouseOut,\n    scope: this\n} );\n</code></pre>\n</div></li></ul></div></li></ul></div></div></div><div id='method-bind' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Kevlar.util.Observable' rel='Kevlar.util.Observable' class='defined-in docClass'>Kevlar.util.Observable</a><br/><a href='source/Observable.html#Kevlar-util-Observable-method-bind' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.util.Observable-method-bind' class='name expandable'>bind</a>( <span class='pre'>String eventName, Function handler, [Object scope], [Object options]</span> )</div><div class='description'><div class='short'>Appends an event handler to this object (shorthand for addListener.) ...</div><div class='long'><p>Appends an event handler to this object (shorthand for <a href=\"#!/api/Kevlar.util.Observable-method-addListener\" rel=\"Kevlar.util.Observable-method-addListener\" class=\"docClass\">addListener</a>.)</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>eventName</span> : String<div class='sub-desc'><p>The type of event to listen for</p>\n</div></li><li><span class='pre'>handler</span> : Function<div class='sub-desc'><p>The method the event invokes</p>\n</div></li><li><span class='pre'>scope</span> : Object (optional)<div class='sub-desc'><p>The scope (<code>this</code> reference) in which the handler function is executed.\n  <strong>If omitted, defaults to the object which fired the event.</strong></p>\n</div></li><li><span class='pre'>options</span> : Object (optional)<div class='sub-desc'><p>An object containing handler configuration.</p>\n</div></li></ul></div></div></div><div id='method-create' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.persistence.Proxy'>Kevlar.persistence.Proxy</span><br/><a href='source/Proxy.html#Kevlar-persistence-Proxy-method-create' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.persistence.Proxy-method-create' class='name expandable'>create</a>( <span class='pre'><a href=\"#!/api/Kevlar.Model\" rel=\"Kevlar.Model\" class=\"docClass\">Kevlar.Model</a> model</span> )<strong class='abstract signature'>abstract</strong></div><div class='description'><div class='short'>Creates a Model on the server. ...</div><div class='long'><p>Creates a Model on the server.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>model</span> : <a href=\"#!/api/Kevlar.Model\" rel=\"Kevlar.Model\" class=\"docClass\">Kevlar.Model</a><div class='sub-desc'><p>The Model instance to create on the server.</p>\n</div></li></ul></div></div></div><div id='method-destroy' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.persistence.Proxy'>Kevlar.persistence.Proxy</span><br/><a href='source/Proxy.html#Kevlar-persistence-Proxy-method-destroy' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.persistence.Proxy-method-destroy' class='name expandable'>destroy</a>( <span class='pre'><a href=\"#!/api/Kevlar.Model\" rel=\"Kevlar.Model\" class=\"docClass\">Kevlar.Model</a> model</span> )<strong class='abstract signature'>abstract</strong></div><div class='description'><div class='short'>Destroys (deletes) the Model on the server. ...</div><div class='long'><p>Destroys (deletes) the Model on the server. This method is not named \"delete\" as \"delete\" is a JavaScript reserved word.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>model</span> : <a href=\"#!/api/Kevlar.Model\" rel=\"Kevlar.Model\" class=\"docClass\">Kevlar.Model</a><div class='sub-desc'><p>The Model instance to delete on the server.</p>\n</div></li></ul></div></div></div><div id='method-enableBubble' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Kevlar.util.Observable' rel='Kevlar.util.Observable' class='defined-in docClass'>Kevlar.util.Observable</a><br/><a href='source/Observable.html#Kevlar-util-Observable-method-enableBubble' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.util.Observable-method-enableBubble' class='name expandable'>enableBubble</a>( <span class='pre'>Array/String.../Object... events</span> )</div><div class='description'><div class='short'>Enables events fired by this Observable to bubble up an owner hierarchy by calling getBubbleTarget to determine\nthe o...</div><div class='long'><p>Enables events fired by this Observable to bubble up an owner hierarchy by calling <a href=\"#!/api/Kevlar.util.Observable-method-getBubbleTarget\" rel=\"Kevlar.util.Observable-method-getBubbleTarget\" class=\"docClass\">getBubbleTarget</a> to determine\nthe object's owner. The default implementation of <a href=\"#!/api/Kevlar.util.Observable-method-getBubbleTarget\" rel=\"Kevlar.util.Observable-method-getBubbleTarget\" class=\"docClass\">getBubbleTarget</a> in this class is just to return null, which specifies no owner.\nThis method should be overridden by subclasses to provide this, if applicable.</p>\n\n<p>Example:</p>\n\n\n<pre><code>MyClass = <a href=\"#!/api/Kevlar-method-extend\" rel=\"Kevlar-method-extend\" class=\"docClass\">Kevlar.extend</a>( <a href=\"#!/api/Kevlar.util.Observable\" rel=\"Kevlar.util.Observable\" class=\"docClass\">Kevlar.util.Observable</a>, {\n\n    constructor : function() {\n        ...\n        \n        this.addEvents( 'myBubbledEvent' );\n        this.enableBubble( 'myBubbledEvent' );  // enable the bubble\n    },\n\n\n    getBubbleTarget : function() {\n        // return a reference to some component that is the target for bubbling. this component may be listened to directly for the 'myBubbledEvent' event\n    }\n\n} );\n</code></pre>\n\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>events</span> : Array/String.../Object...<div class='sub-desc'><p>The event name to bubble, Array of event names, or one argument per event name. This may also\n  be an array of objects, where the objects have the following properties:<div class=\"mdetail-params\"><ul>\n   <li><b>eventName</b> : String<div class=\"sub-desc\">The name of the event to enable bubbling for.</div></li>\n  <li>\n <b>bubbleFn</b> : Function\n <div class=\"sub-desc\">\n   A function that determines, at every level in the hierarchy, if bubbling should continue. If this function returns false\n   at any point, the bubbling of the event is stopped. The function is given one argument: the Observable that the event\n   has just been fired for.  This function can be used to test for some condition, and then stop bubbling based on that condition.\n   </div>\n   </li>\n   <li>\n   <b>scope</b> : Object\n   <div class=\"sub-desc\">The scope to run the bubbleFn in. Defaults to the Observable that the event bubbling was enabled on.</div>\n   </li>\n</ul></div></p>\n</div></li></ul></div></div></div><div id='method-fireEvent' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Kevlar.util.Observable' rel='Kevlar.util.Observable' class='defined-in docClass'>Kevlar.util.Observable</a><br/><a href='source/Observable.html#Kevlar-util-Observable-method-fireEvent' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.util.Observable-method-fireEvent' class='name expandable'>fireEvent</a>( <span class='pre'>String eventName, Object... args</span> ) : Boolean</div><div class='description'><div class='short'>Fires the specified event with the passed parameters (minus the event name). ...</div><div class='long'><p>Fires the specified event with the passed parameters (minus the event name).</p>\n\n<p>An event may be set to bubble up an Observable parent hierarchy (See <a href=\"#!/api/Kevlar.util.Observable-method-getBubbleTarget\" rel=\"Kevlar.util.Observable-method-getBubbleTarget\" class=\"docClass\">getBubbleTarget</a>),\nby calling <a href=\"#!/api/Kevlar.util.Observable-method-enableBubble\" rel=\"Kevlar.util.Observable-method-enableBubble\" class=\"docClass\">enableBubble</a> for an event.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>eventName</span> : String<div class='sub-desc'><p>The name of the event to fire.</p>\n</div></li><li><span class='pre'>args</span> : Object...<div class='sub-desc'><p>Variable number of parameters are passed to handlers.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>returns false if any of the handlers return false otherwise it returns true.</p>\n</div></li></ul></div></div></div><div id='method-getBubbleTarget' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Kevlar.util.Observable' rel='Kevlar.util.Observable' class='defined-in docClass'>Kevlar.util.Observable</a><br/><a href='source/Observable.html#Kevlar-util-Observable-method-getBubbleTarget' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.util.Observable-method-getBubbleTarget' class='name expandable'>getBubbleTarget</a>( <span class='pre'></span> ) : <a href=\"#!/api/Kevlar.util.Observable\" rel=\"Kevlar.util.Observable\" class=\"docClass\">Kevlar.util.Observable</a><strong class='protected signature'>protected</strong></div><div class='description'><div class='short'>Specifies the Observable that is the target of the event's bubbling, if bubbling is enabled for\nevents by the enableB...</div><div class='long'><p>Specifies the Observable that is the target of the event's bubbling, if bubbling is enabled for\nevents by the <a href=\"#!/api/Kevlar.util.Observable-method-enableBubble\" rel=\"Kevlar.util.Observable-method-enableBubble\" class=\"docClass\">enableBubble</a> method. This default implementation returns null, and should\nbe overridden by subclasses to specify their bubbling target.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Kevlar.util.Observable\" rel=\"Kevlar.util.Observable\" class=\"docClass\">Kevlar.util.Observable</a></span><div class='sub-desc'><p>The Observable that is the target for event bubbling, or null if none.</p>\n</div></li></ul></div></div></div><div id='method-hasListener' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Kevlar.util.Observable' rel='Kevlar.util.Observable' class='defined-in docClass'>Kevlar.util.Observable</a><br/><a href='source/Observable.html#Kevlar-util-Observable-method-hasListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.util.Observable-method-hasListener' class='name expandable'>hasListener</a>( <span class='pre'>String eventName</span> ) : Boolean</div><div class='description'><div class='short'>Checks to see if this object has any listeners for a specified event ...</div><div class='long'><p>Checks to see if this object has any listeners for a specified event</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>eventName</span> : String<div class='sub-desc'><p>The name of the event to check for</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True if the event is being listened for, else false</p>\n</div></li></ul></div></div></div><div id='method-on' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Kevlar.util.Observable' rel='Kevlar.util.Observable' class='defined-in docClass'>Kevlar.util.Observable</a><br/><a href='source/Observable.html#Kevlar-util-Observable-method-on' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.util.Observable-method-on' class='name expandable'>on</a>( <span class='pre'>String eventName, Function handler, [Object scope], [Object options]</span> )</div><div class='description'><div class='short'>Appends an event handler to this object (shorthand for addListener.) ...</div><div class='long'><p>Appends an event handler to this object (shorthand for <a href=\"#!/api/Kevlar.util.Observable-method-addListener\" rel=\"Kevlar.util.Observable-method-addListener\" class=\"docClass\">addListener</a>.)</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>eventName</span> : String<div class='sub-desc'><p>The type of event to listen for</p>\n</div></li><li><span class='pre'>handler</span> : Function<div class='sub-desc'><p>The method the event invokes</p>\n</div></li><li><span class='pre'>scope</span> : Object (optional)<div class='sub-desc'><p>The scope (<code>this</code> reference) in which the handler function is executed.\n  <strong>If omitted, defaults to the object which fired the event.</strong></p>\n</div></li><li><span class='pre'>options</span> : Object (optional)<div class='sub-desc'><p>An object containing handler configuration.</p>\n</div></li></ul></div></div></div><div id='method-purgeListeners' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Kevlar.util.Observable' rel='Kevlar.util.Observable' class='defined-in docClass'>Kevlar.util.Observable</a><br/><a href='source/Observable.html#Kevlar-util-Observable-method-purgeListeners' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.util.Observable-method-purgeListeners' class='name expandable'>purgeListeners</a>( <span class='pre'></span> )</div><div class='description'><div class='short'>Removes all listeners for this object ...</div><div class='long'><p>Removes all listeners for this object</p>\n</div></div></div><div id='method-read' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.persistence.Proxy'>Kevlar.persistence.Proxy</span><br/><a href='source/Proxy.html#Kevlar-persistence-Proxy-method-read' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.persistence.Proxy-method-read' class='name expandable'>read</a>( <span class='pre'><a href=\"#!/api/Kevlar.Model\" rel=\"Kevlar.Model\" class=\"docClass\">Kevlar.Model</a> model</span> )<strong class='abstract signature'>abstract</strong></div><div class='description'><div class='short'>Reads a Model from the server. ...</div><div class='long'><p>Reads a Model from the server.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>model</span> : <a href=\"#!/api/Kevlar.Model\" rel=\"Kevlar.Model\" class=\"docClass\">Kevlar.Model</a><div class='sub-desc'><p>The Model instance to read from the server.</p>\n</div></li></ul></div></div></div><div id='method-relayEvents' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Kevlar.util.Observable' rel='Kevlar.util.Observable' class='defined-in docClass'>Kevlar.util.Observable</a><br/><a href='source/Observable.html#Kevlar-util-Observable-method-relayEvents' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.util.Observable-method-relayEvents' class='name expandable'>relayEvents</a>( <span class='pre'>Object o, Array events</span> )</div><div class='description'><div class='short'>Relays selected events from the specified Observable as if the events were fired by this. ...</div><div class='long'><p>Relays selected events from the specified Observable as if the events were fired by <code>this</code>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>o</span> : Object<div class='sub-desc'><p>The Observable whose events this object is to relay.</p>\n</div></li><li><span class='pre'>events</span> : Array<div class='sub-desc'><p>Array of event names to relay.</p>\n</div></li></ul></div></div></div><div id='method-removeListener' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Kevlar.util.Observable' rel='Kevlar.util.Observable' class='defined-in docClass'>Kevlar.util.Observable</a><br/><a href='source/Observable.html#Kevlar-util-Observable-method-removeListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.util.Observable-method-removeListener' class='name expandable'>removeListener</a>( <span class='pre'>String eventName, Function handler, [Object scope]</span> )</div><div class='description'><div class='short'>Removes an event handler. ...</div><div class='long'><p>Removes an event handler.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>eventName</span> : String<div class='sub-desc'><p>The type of event the handler was associated with.</p>\n</div></li><li><span class='pre'>handler</span> : Function<div class='sub-desc'><p>The handler to remove. <b>This must be a reference to the function passed into the <a href=\"#!/api/Kevlar.util.Observable-method-addListener\" rel=\"Kevlar.util.Observable-method-addListener\" class=\"docClass\">addListener</a> call.</b></p>\n</div></li><li><span class='pre'>scope</span> : Object (optional)<div class='sub-desc'><p>The scope originally specified for the handler.</p>\n</div></li></ul></div></div></div><div id='method-resumeEvents' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Kevlar.util.Observable' rel='Kevlar.util.Observable' class='defined-in docClass'>Kevlar.util.Observable</a><br/><a href='source/Observable.html#Kevlar-util-Observable-method-resumeEvents' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.util.Observable-method-resumeEvents' class='name expandable'>resumeEvents</a>( <span class='pre'></span> )</div><div class='description'><div class='short'>Resume firing events. ...</div><div class='long'><p>Resume firing events. (see <a href=\"#!/api/Kevlar.util.Observable-method-suspendEvents\" rel=\"Kevlar.util.Observable-method-suspendEvents\" class=\"docClass\">suspendEvents</a>)\nIf events were suspended using the <code>&lt;b&gt;queueSuspended&lt;/b&gt;</code> parameter, then all\nevents fired during event suspension will be sent to any listeners now.</p>\n</div></div></div><div id='method-suspendEvents' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Kevlar.util.Observable' rel='Kevlar.util.Observable' class='defined-in docClass'>Kevlar.util.Observable</a><br/><a href='source/Observable.html#Kevlar-util-Observable-method-suspendEvents' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.util.Observable-method-suspendEvents' class='name expandable'>suspendEvents</a>( <span class='pre'>Boolean queueSuspended</span> )</div><div class='description'><div class='short'>Suspend the firing of all events. ...</div><div class='long'><p>Suspend the firing of all events. (see <a href=\"#!/api/Kevlar.util.Observable-method-resumeEvents\" rel=\"Kevlar.util.Observable-method-resumeEvents\" class=\"docClass\">resumeEvents</a>)</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>queueSuspended</span> : Boolean<div class='sub-desc'><p>Pass as true to queue up suspended events to be fired\n  after the <a href=\"#!/api/Kevlar.util.Observable-method-resumeEvents\" rel=\"Kevlar.util.Observable-method-resumeEvents\" class=\"docClass\">resumeEvents</a> call instead of discarding all suspended events;</p>\n</div></li></ul></div></div></div><div id='method-trigger' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Kevlar.util.Observable' rel='Kevlar.util.Observable' class='defined-in docClass'>Kevlar.util.Observable</a><br/><a href='source/Observable.html#Kevlar-util-Observable-method-trigger' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.util.Observable-method-trigger' class='name expandable'>trigger</a>( <span class='pre'></span> )</div><div class='description'><div class='short'>Alias of fireEvent ...</div><div class='long'><p>Alias of <a href=\"#!/api/Kevlar.util.Observable-method-fireEvent\" rel=\"Kevlar.util.Observable-method-fireEvent\" class=\"docClass\">fireEvent</a></p>\n</div></div></div><div id='method-un' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Kevlar.util.Observable' rel='Kevlar.util.Observable' class='defined-in docClass'>Kevlar.util.Observable</a><br/><a href='source/Observable.html#Kevlar-util-Observable-method-un' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.util.Observable-method-un' class='name expandable'>un</a>( <span class='pre'>String eventName, Function handler, [Object scope]</span> )</div><div class='description'><div class='short'>Removes an event handler (shorthand for removeListener.) ...</div><div class='long'><p>Removes an event handler (shorthand for <a href=\"#!/api/Kevlar.util.Observable-method-removeListener\" rel=\"Kevlar.util.Observable-method-removeListener\" class=\"docClass\">removeListener</a>.)</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>eventName</span> : String<div class='sub-desc'><p>The type of event the handler was associated with.</p>\n</div></li><li><span class='pre'>handler</span> : Function<div class='sub-desc'><p>The handler to remove. <strong>This must be a reference to the function passed into the <a href=\"#!/api/Kevlar.util.Observable-method-addListener\" rel=\"Kevlar.util.Observable-method-addListener\" class=\"docClass\">addListener</a> call.</strong></p>\n</div></li><li><span class='pre'>scope</span> : Object (optional)<div class='sub-desc'><p>The scope originally specified for the handler.</p>\n</div></li></ul></div></div></div><div id='method-unbind' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Kevlar.util.Observable' rel='Kevlar.util.Observable' class='defined-in docClass'>Kevlar.util.Observable</a><br/><a href='source/Observable.html#Kevlar-util-Observable-method-unbind' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.util.Observable-method-unbind' class='name expandable'>unbind</a>( <span class='pre'>String eventName, Function handler, [Object scope]</span> )</div><div class='description'><div class='short'>Removes an event handler (shorthand for removeListener.) ...</div><div class='long'><p>Removes an event handler (shorthand for <a href=\"#!/api/Kevlar.util.Observable-method-removeListener\" rel=\"Kevlar.util.Observable-method-removeListener\" class=\"docClass\">removeListener</a>.)</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>eventName</span> : String<div class='sub-desc'><p>The type of event the handler was associated with.</p>\n</div></li><li><span class='pre'>handler</span> : Function<div class='sub-desc'><p>The handler to remove. <strong>This must be a reference to the function passed into the <a href=\"#!/api/Kevlar.util.Observable-method-addListener\" rel=\"Kevlar.util.Observable-method-addListener\" class=\"docClass\">addListener</a> call.</strong></p>\n</div></li><li><span class='pre'>scope</span> : Object (optional)<div class='sub-desc'><p>The scope originally specified for the handler.</p>\n</div></li></ul></div></div></div><div id='method-update' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.persistence.Proxy'>Kevlar.persistence.Proxy</span><br/><a href='source/Proxy.html#Kevlar-persistence-Proxy-method-update' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.persistence.Proxy-method-update' class='name expandable'>update</a>( <span class='pre'><a href=\"#!/api/Kevlar.Model\" rel=\"Kevlar.Model\" class=\"docClass\">Kevlar.Model</a> model</span> )<strong class='abstract signature'>abstract</strong></div><div class='description'><div class='short'>Updates the Model on the server, using the provided data. ...</div><div class='long'><p>Updates the Model on the server, using the provided <code>data</code>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>model</span> : <a href=\"#!/api/Kevlar.Model\" rel=\"Kevlar.Model\" class=\"docClass\">Kevlar.Model</a><div class='sub-desc'><p>The model to persist to the server.</p>\n</div></li></ul></div></div></div></div><div class='subsection'><div class='definedBy'>Defined By</div><h4 class='members-subtitle'>Static Methods</h3><div id='static-method-create' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.persistence.Proxy'>Kevlar.persistence.Proxy</span><br/><a href='source/Proxy.html#Kevlar-persistence-Proxy-static-method-create' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.persistence.Proxy-static-method-create' class='name expandable'>create</a>( <span class='pre'>Object config</span> ) : <a href=\"#!/api/Kevlar.persistence.Proxy\" rel=\"Kevlar.persistence.Proxy\" class=\"docClass\">Kevlar.persistence.Proxy</a><strong class='static signature'>static</strong></div><div class='description'><div class='short'>Creates (instantiates) a Kevlar.persistence.Proxy based on its type name, given\na configuration object that has a typ...</div><div class='long'><p>Creates (instantiates) a <a href=\"#!/api/Kevlar.persistence.Proxy\" rel=\"Kevlar.persistence.Proxy\" class=\"docClass\">Kevlar.persistence.Proxy</a> based on its type name, given\na configuration object that has a <code>type</code> property. If an already-instantiated\n<a href=\"#!/api/Kevlar.persistence.Proxy\" rel=\"Kevlar.persistence.Proxy\" class=\"docClass\">Proxy</a> is provided, it will simply be returned unchanged.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>config</span> : Object<div class='sub-desc'><p>The configuration object for the Proxy. Config objects should have the property <code>type</code>,\n  which determines which type of <a href=\"#!/api/Kevlar.persistence.Proxy\" rel=\"Kevlar.persistence.Proxy\" class=\"docClass\">Kevlar.persistence.Proxy</a> will be instantiated. If the object does not\n  have a <code>type</code> property, an error will be thrown. Note that already-instantiated <a href=\"#!/api/Kevlar.persistence.Proxy\" rel=\"Kevlar.persistence.Proxy\" class=\"docClass\">Proxies</a>\n  will simply be returned unchanged.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Kevlar.persistence.Proxy\" rel=\"Kevlar.persistence.Proxy\" class=\"docClass\">Kevlar.persistence.Proxy</a></span><div class='sub-desc'><p>The instantiated Proxy.</p>\n</div></li></ul></div></div></div><div id='static-method-register' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.persistence.Proxy'>Kevlar.persistence.Proxy</span><br/><a href='source/Proxy.html#Kevlar-persistence-Proxy-static-method-register' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.persistence.Proxy-static-method-register' class='name expandable'>register</a>( <span class='pre'>String type, Function proxyClass</span> )<strong class='static signature'>static</strong></div><div class='description'><div class='short'>Registers a Proxy subclass by name, so that it may be created by an anonymous object\nwith a type attribute when set t...</div><div class='long'><p>Registers a Proxy subclass by name, so that it may be created by an anonymous object\nwith a <code>type</code> attribute when set to the prototype of a <a href=\"#!/api/Kevlar.Model\" rel=\"Kevlar.Model\" class=\"docClass\">Kevlar.Model</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>type</span> : String<div class='sub-desc'><p>The type name of the persistence proxy.</p>\n</div></li><li><span class='pre'>proxyClass</span> : Function<div class='sub-desc'><p>The class (constructor function) to register.</p>\n</div></li></ul></div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-event'>Events</h3><div class='subsection'><div id='event-all' class='member first-child inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Kevlar.util.Observable' rel='Kevlar.util.Observable' class='defined-in docClass'>Kevlar.util.Observable</a><br/><a href='source/Observable.html#Kevlar-util-Observable-event-all' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.util.Observable-event-all' class='name expandable'>all</a>( <span class='pre'>String eventName, Mixed... args</span> )</div><div class='description'><div class='short'>Special event which can be used to subscribe to all events from the Observable. ...</div><div class='long'><p>Special event which can be used to subscribe to <em>all</em> events from the Observable. When a given event\nis fired, this event is fired immediately after it, with the name of the original event as the first\nargument, and all other original arguments provided immediately after.</p>\n\n<p>Ex:</p>\n\n<pre><code>var myObservable = new <a href=\"#!/api/Kevlar.util.Observable\" rel=\"Kevlar.util.Observable\" class=\"docClass\">Kevlar.util.Observable</a>();\nmyObservable.on( 'all', function( eventName ) {\n    console.log( \"Event '\" + eventName + \"' was fired with args: \", Array.prototype.slice.call( arguments, 1 ) );\n} );\n\nmyObservable.fireEvent( 'change', 'a', 'b', 'c' );\n// console: Event 'change' was fired with args: [ \"a\", \"b\", \"c\" ]\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>eventName</span> : String<div class='sub-desc'><p>The name of the original event that was fired.</p>\n</div></li><li><span class='pre'>args</span> : Mixed...<div class='sub-desc'><p>The original arguments that were provided with the original event.</p>\n</div></li></ul></div></div></div></div></div></div></div>"});