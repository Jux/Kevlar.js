Ext.data.JsonP.Kevlar_persistence_RestProxy({"singleton":false,"statics":{"cfg":[],"property":[],"css_var":[],"event":[],"css_mixin":[],"method":[]},"files":[{"filename":"RestProxy.js","href":"RestProxy.html#Kevlar-persistence-RestProxy"}],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'><a href='#!/api/Kevlar.util.Observable' rel='Kevlar.util.Observable' class='docClass'>Kevlar.util.Observable</a><div class='subclass '><a href='#!/api/Kevlar.persistence.Proxy' rel='Kevlar.persistence.Proxy' class='docClass'>Kevlar.persistence.Proxy</a><div class='subclass '><strong>Kevlar.persistence.RestProxy</strong></div></div></div><h4>Files</h4><div class='dependency'><a href='source/RestProxy.html#Kevlar-persistence-RestProxy' target='_blank'>RestProxy.js</a></div></pre><div class='doc-contents'><p>RestProxy is responsible for performing CRUD operations in a RESTful manner for a given Model on the server.</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-cfg'>Config options</h3><div class='subsection'><div id='cfg-actionMethods' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.persistence.RestProxy'>Kevlar.persistence.RestProxy</span><br/><a href='source/RestProxy.html#Kevlar-persistence-RestProxy-cfg-actionMethods' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.persistence.RestProxy-cfg-actionMethods' class='name expandable'>actionMethods</a><span> : Object</span></div><div class='description'><div class='short'>A mapping of the HTTP method to use for each action. ...</div><div class='long'><p>A mapping of the HTTP method to use for each action. This may be overridden for custom\nserver implementations.</p>\n<p>Defaults to: <code>{create: &quot;POST&quot;, read: &quot;GET&quot;, update: &quot;PUT&quot;, destroy: &quot;DELETE&quot;}</code></p></div></div></div><div id='cfg-appendId' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.persistence.RestProxy'>Kevlar.persistence.RestProxy</span><br/><a href='source/RestProxy.html#Kevlar-persistence-RestProxy-cfg-appendId' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.persistence.RestProxy-cfg-appendId' class='name expandable'>appendId</a><span> : Boolean</span></div><div class='description'><div class='short'>True to automatically append the ID of the Model to the urlRoot when\nperforming 'read', 'update', and 'delete' actions. ...</div><div class='long'><p>True to automatically append the ID of the Model to the <a href=\"#!/api/Kevlar.persistence.RestProxy-cfg-urlRoot\" rel=\"Kevlar.persistence.RestProxy-cfg-urlRoot\" class=\"docClass\">urlRoot</a> when\nperforming 'read', 'update', and 'delete' actions.</p>\n<p>Defaults to: <code>true</code></p></div></div></div><div id='cfg-incremental' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.persistence.RestProxy'>Kevlar.persistence.RestProxy</span><br/><a href='source/RestProxy.html#Kevlar-persistence-RestProxy-cfg-incremental' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.persistence.RestProxy-cfg-incremental' class='name expandable'>incremental</a><span> : Boolean</span></div><div class='description'><div class='short'>True to have the RestProxy only provide data that has changed to the server when\nupdating a model. ...</div><div class='long'><p>True to have the RestProxy only provide data that has changed to the server when\nupdating a model. By using this, it isn't exactly following REST per se, but can\noptimize requests by only providing a subset of the full model data. Only enable\nthis if your server supports this.</p>\n<p>Defaults to: <code>false</code></p></div></div></div><div id='cfg-listeners' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Kevlar.util.Observable' rel='Kevlar.util.Observable' class='defined-in docClass'>Kevlar.util.Observable</a><br/><a href='source/Observable.html#Kevlar-util-Observable-cfg-listeners' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.util.Observable-cfg-listeners' class='name expandable'>listeners</a><span> : Object</span></div><div class='description'><div class='short'>(optional) A config object containing one or more event handlers to be added to this\nobject during initialization. ...</div><div class='long'><p>(optional) <p>A config object containing one or more event handlers to be added to this\nobject during initialization.  This should be a valid listeners config object as specified in the\n<a href=\"#!/api/Kevlar.util.Observable-method-addListener\" rel=\"Kevlar.util.Observable-method-addListener\" class=\"docClass\">addListener</a> example for attaching multiple handlers at once.</p>\nTo access DOM events directly from a Component's HTMLElement, listeners must be added to the <i>Element</i>\nafter the Component has been rendered. A plugin can simplify this step:</p>\n\n<pre><code>// Plugin is configured with a listeners config object.\n// The Component is appended to the argument list of all handler functions.\nDomObserver = <a href=\"#!/api/Kevlar-property-extend\" rel=\"Kevlar-property-extend\" class=\"docClass\">Kevlar.extend</a>(Object, {\n    constructor: function(config) {\n        this.listeners = config.listeners ? config.listeners : config;\n    },\n\n    // Component passes itself into plugin&#39;s init method\n    initPlugin: function(c) {\n        var p, l = this.listeners;\n        for (p in l) {\n            if (<a href=\"#!/api/Kevlar-method-isFunction\" rel=\"Kevlar-method-isFunction\" class=\"docClass\">Kevlar.isFunction</a>(l[p])) {\n                l[p] = this.createHandler(l[p], c);\n            } else {\n                l[p].fn = this.createHandler(l[p].fn, c);\n            }\n        }\n\n        // Add the listeners to the Element immediately following the render call\n        c.render = c.render.createSequence(function() {\n            var e = c.getEl();\n            if (e) {\n                e.on(l);\n            }\n        });\n    },\n\n    createHandler: function(fn, c) {\n        return function(e) {\n            fn.call(this, e, c);\n        };\n    }\n});\n\nvar combo = new Kevlar.form.ComboBox({\n\n    // Collapse combo when its element is clicked on\n    plugins: [ new DomObserver({\n        click: function(evt, comp) {\n            comp.collapse();\n        }\n    })],\n    store: myStore,\n    typeAhead: true,\n    mode: 'local',\n    triggerAction: 'all'\n});\n</code></pre>\n\n\n<p></p></p>\n</div></div></div><div id='cfg-rootProperty' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.persistence.RestProxy'>Kevlar.persistence.RestProxy</span><br/><a href='source/RestProxy.html#Kevlar-persistence-RestProxy-cfg-rootProperty' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.persistence.RestProxy-cfg-rootProperty' class='name expandable'>rootProperty</a><span> : String</span></div><div class='description'><div class='short'>If the server requires the data to be wrapped in a property of its own, use this config\nto specify it. ...</div><div class='long'><p>If the server requires the data to be wrapped in a property of its own, use this config\nto specify it. For example, if PUT'ing a Task's data needs to look like this, use this config:</p>\n\n<pre><code>{\n    \"task\" : {\n        \"text\" : \"Do Something\",\n        \"isDone\" : false\n    }\n}\n</code></pre>\n\n<p>This config should be set to \"task\" in this case.</p>\n<p>Defaults to: <code>&quot;&quot;</code></p></div></div></div><div id='cfg-urlRoot' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.persistence.RestProxy'>Kevlar.persistence.RestProxy</span><br/><a href='source/RestProxy.html#Kevlar-persistence-RestProxy-cfg-urlRoot' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.persistence.RestProxy-cfg-urlRoot' class='name expandable'>urlRoot</a><span> : String</span></div><div class='description'><div class='short'>The url to use in a RESTful manner to perform CRUD operations. ...</div><div class='long'><p>The url to use in a RESTful manner to perform CRUD operations. Ex: <code>/tasks</code>.</p>\n\n<p>The <a href=\"#!/api/Kevlar.Model-cfg-idAttribute\" rel=\"Kevlar.Model-cfg-idAttribute\" class=\"docClass\">id</a> of the <a href=\"#!/api/Kevlar.Model\" rel=\"Kevlar.Model\" class=\"docClass\">Kevlar.Model</a> being read/updated/deleted\nwill automatically be appended to this url. Ex: <code>/tasks/12</code></p>\n<p>Defaults to: <code>&quot;&quot;</code></p></div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-constructor' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.persistence.RestProxy'>Kevlar.persistence.RestProxy</span><br/><a href='source/RestProxy.html#Kevlar-persistence-RestProxy-method-constructor' target='_blank' class='view-source'>view source</a></div><strong class='new-keyword'>new</strong><a href='#!/api/Kevlar.persistence.RestProxy-method-constructor' class='name expandable'>Kevlar.persistence.RestProxy</a>( <span class='pre'>Object config</span> ) : Object</div><div class='description'><div class='short'>Creates a new RestProxy instance. ...</div><div class='long'><p>Creates a new RestProxy instance.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>config</span> : Object<div class='sub-desc'><p>The configuration options for this class, specified in an object (hash).</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-addEvents' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Kevlar.util.Observable' rel='Kevlar.util.Observable' class='defined-in docClass'>Kevlar.util.Observable</a><br/><a href='source/Observable.html#Kevlar-util-Observable-method-addEvents' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.util.Observable-method-addEvents' class='name expandable'>addEvents</a>( <span class='pre'>Object/String o, String Optional</span> )</div><div class='description'><div class='short'>Adds the specified events to the list of events which this Observable may fire. ...</div><div class='long'><p>Adds the specified events to the list of events which this Observable may fire.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>o</span> : Object/String<div class='sub-desc'><p>Either an object with event names as properties with a value of <code>true</code>\nor the first event name string if multiple event names are being passed as separate parameters.</p>\n</div></li><li><span class='pre'>Optional</span> : String<div class='sub-desc'><p>. Event name if multiple event names are being passed as separate parameters.\nUsage:</p>\n\n<pre><code>this.addEvents('storeloaded', 'storecleared');\n</code></pre>\n\n</div></li></ul></div></div></div><div id='method-addListener' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Kevlar.util.Observable' rel='Kevlar.util.Observable' class='defined-in docClass'>Kevlar.util.Observable</a><br/><a href='source/Observable.html#Kevlar-util-Observable-method-addListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.util.Observable-method-addListener' class='name expandable'>addListener</a>( <span class='pre'>String eventName, Function handler, [Object scope], [Object options]</span> )</div><div class='description'><div class='short'>Appends an event handler to this object. ...</div><div class='long'><p>Appends an event handler to this object.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>eventName</span> : String<div class='sub-desc'><p>The name of the event to listen for.</p>\n</div></li><li><span class='pre'>handler</span> : Function<div class='sub-desc'><p>The method the event invokes.</p>\n</div></li><li><span class='pre'>scope</span> : Object (optional)<div class='sub-desc'><p>The scope (<code><b>this</b></code> reference) in which the handler function is executed.\n<b>If omitted, defaults to the object which fired the event.</b></p>\n</div></li><li><span class='pre'>options</span> : Object (optional)<div class='sub-desc'><p>An object containing handler configuration.\nproperties. This may contain any of the following properties:<ul>\n<li><b>scope</b> : Object<div class=\"sub-desc\">The scope (<code><b>this</b></code> reference) in which the handler function is executed.\n<b>If omitted, defaults to the object which fired the event.</b></div></li>\n<li><b>delay</b> : Number<div class=\"sub-desc\">The number of milliseconds to delay the invocation of the handler after the event fires.</div></li>\n<li><b>single</b> : Boolean<div class=\"sub-desc\">True to add a handler to handle just the next firing of the event, and then remove itself.</div></li>\n<li><b>buffer</b> : Number<div class=\"sub-desc\">Causes the handler to be scheduled to run in an <a href=\"#!/api/Kevlar.util.DelayedTask\" rel=\"Kevlar.util.DelayedTask\" class=\"docClass\">Kevlar.util.DelayedTask</a> delayed\nby the specified number of milliseconds. If the event fires again within that time, the original\nhandler is <em>not</em> invoked, but the new handler is scheduled in its place.</div></li>\n<li><b>target</b> : Observable<div class=\"sub-desc\">Only call the handler if the event was fired on the target Observable, <i>not</i>\nif the event was bubbled up from a child Observable.</div></li>\n</ul><br></p>\n\n<p>\n<b>Combining Options</b><br>\nUsing the options argument, it is possible to combine different types of listeners:<br>\n<br>\nA delayed, one-time listener.\n<pre><code>myDataView.on('click', this.onClick, this, {\nsingle: true,\ndelay: 100\n});</code></pre>\n<p>\n<b>Attaching multiple handlers in 1 call</b><br>\nThe method also allows for a single argument to be passed which is a config object containing properties\nwhich specify multiple handlers.\n<p>\n<pre><code>myGridPanel.on({\n'click' : {\n    fn: this.onClick,\n    scope: this,\n    delay: 100\n},\n'mouseover' : {\n    fn: this.onMouseOver,\n    scope: this\n},\n'mouseout' : {\n    fn: this.onMouseOut,\n    scope: this\n}\n});</code></pre>\n<p>\nOr a shorthand syntax:<br>\n<pre><code>myGridPanel.on({\n'click' : this.onClick,\n'mouseover' : this.onMouseOver,\n'mouseout' : this.onMouseOut,\n scope: this\n});</code></pre>\n\n</div></li></ul></div></div></div><div id='method-bind' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Kevlar.util.Observable' rel='Kevlar.util.Observable' class='defined-in docClass'>Kevlar.util.Observable</a><br/><a href='source/Observable.html#Kevlar-util-Observable-method-bind' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.util.Observable-method-bind' class='name expandable'>bind</a>( <span class='pre'>String eventName, Function handler, [Object scope], [Object options]</span> )</div><div class='description'><div class='short'>Appends an event handler to this object (shorthand for addListener.) ...</div><div class='long'><p>Appends an event handler to this object (shorthand for <a href=\"#!/api/Kevlar.util.Observable-method-addListener\" rel=\"Kevlar.util.Observable-method-addListener\" class=\"docClass\">addListener</a>.)</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>eventName</span> : String<div class='sub-desc'><p>The type of event to listen for</p>\n</div></li><li><span class='pre'>handler</span> : Function<div class='sub-desc'><p>The method the event invokes</p>\n</div></li><li><span class='pre'>scope</span> : Object (optional)<div class='sub-desc'><p>The scope (<code><b>this</b></code> reference) in which the handler function is executed.\n<b>If omitted, defaults to the object which fired the event.</b></p>\n</div></li><li><span class='pre'>options</span> : Object (optional)<div class='sub-desc'><p>An object containing handler configuration.</p>\n</div></li></ul></div></div></div><div id='method-buildUrl' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.persistence.RestProxy'>Kevlar.persistence.RestProxy</span><br/><a href='source/RestProxy.html#Kevlar-persistence-RestProxy-method-buildUrl' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.persistence.RestProxy-method-buildUrl' class='name expandable'>buildUrl</a>( <span class='pre'><a href=\"#!/api/Kevlar.Model\" rel=\"Kevlar.Model\" class=\"docClass\">Kevlar.Model</a> model, [String action]</span> ) : String<strong class='protected signature'>protected</strong></div><div class='description'><div class='short'>Builds the URL to use to do CRUD operations. ...</div><div class='long'><p>Builds the URL to use to do CRUD operations.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>model</span> : <a href=\"#!/api/Kevlar.Model\" rel=\"Kevlar.Model\" class=\"docClass\">Kevlar.Model</a><div class='sub-desc'><p>The model that a url is being built for.</p>\n</div></li><li><span class='pre'>action</span> : String (optional)<div class='sub-desc'><p>The action being taken. This will be one of: 'create', 'read', 'update', or 'destroy'.\n  At this time, this parameter is not used by the buildUrl method, but can be used by subclasses of RestProxy.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>The url to use.</p>\n</div></li></ul></div></div></div><div id='method-create' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.persistence.RestProxy'>Kevlar.persistence.RestProxy</span><br/><a href='source/RestProxy.html#Kevlar-persistence-RestProxy-method-create' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.persistence.RestProxy-method-create' class='name expandable'>create</a>( <span class='pre'><a href=\"#!/api/Kevlar.Model\" rel=\"Kevlar.Model\" class=\"docClass\">Kevlar.Model</a> The, [Object options]</span> ) : jqXHR</div><div class='description'><div class='short'>Creates the Model on the server. ...</div><div class='long'><p>Creates the Model on the server. Any response data that is provided from the request is\nthen <a href=\"#!/api/Kevlar.Model-method-set\" rel=\"Kevlar.Model-method-set\" class=\"docClass\">Kevlar.Model.set</a> to the Model.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>The</span> : <a href=\"#!/api/Kevlar.Model\" rel=\"Kevlar.Model\" class=\"docClass\">Kevlar.Model</a><div class='sub-desc'><p>Model instance to create on the server.</p>\n</div></li><li><span class='pre'>options</span> : Object (optional)<div class='sub-desc'><p>An object which may contain the following properties:</p>\n<ul><li><span class='pre'>async</span> : Boolean (optional)<div class='sub-desc'><p>True to make the request asynchronous, false to make it synchronous.</p>\n<p>Defaults to: <code>true</code></p></div></li><li><span class='pre'>success</span> : Function (optional)<div class='sub-desc'><p>Function to call if the delete is successful.</p>\n</div></li><li><span class='pre'>error</span> : Function (optional)<div class='sub-desc'><p>Function to call if the delete fails.</p>\n</div></li><li><span class='pre'>complete</span> : Function (optional)<div class='sub-desc'><p>Function to call regardless of if the delete is successful or fails.</p>\n</div></li><li><span class='pre'>scope</span> : Object (optional)<div class='sub-desc'><p>The object to call the <code>success</code>, <code>error</code>, and <code>complete</code> callbacks in.</p>\n<p>Defaults to: <code>window</code></p></div></li></ul></div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>jqXHR</span><div class='sub-desc'><p>The jQuery XMLHttpRequest superset object for the request.</p>\n</div></li></ul><p>Overrides: <a href='#!/api/Kevlar.persistence.Proxy-method-create' rel='Kevlar.persistence.Proxy-method-create' class='docClass'>Kevlar.persistence.Proxy.create</a></p></div></div></div><div id='method-destroy' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.persistence.RestProxy'>Kevlar.persistence.RestProxy</span><br/><a href='source/RestProxy.html#Kevlar-persistence-RestProxy-method-destroy' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.persistence.RestProxy-method-destroy' class='name expandable'>destroy</a>( <span class='pre'><a href=\"#!/api/Kevlar.Model\" rel=\"Kevlar.Model\" class=\"docClass\">Kevlar.Model</a> The, [Object options]</span> ) : jqXHR</div><div class='description'><div class='short'>Destroys (deletes) the Model on the server. ...</div><div class='long'><p>Destroys (deletes) the Model on the server.</p>\n\n<p>Note that this method is not named \"delete\" as \"delete\" is a JavaScript reserved word.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>The</span> : <a href=\"#!/api/Kevlar.Model\" rel=\"Kevlar.Model\" class=\"docClass\">Kevlar.Model</a><div class='sub-desc'><p>Model instance to delete on the server.</p>\n</div></li><li><span class='pre'>options</span> : Object (optional)<div class='sub-desc'><p>An object which may contain the following properties:</p>\n<ul><li><span class='pre'>async</span> : Boolean (optional)<div class='sub-desc'><p>True to make the request asynchronous, false to make it synchronous.</p>\n<p>Defaults to: <code>true</code></p></div></li><li><span class='pre'>success</span> : Function (optional)<div class='sub-desc'><p>Function to call if the delete is successful.</p>\n</div></li><li><span class='pre'>error</span> : Function (optional)<div class='sub-desc'><p>Function to call if the delete fails.</p>\n</div></li><li><span class='pre'>complete</span> : Function (optional)<div class='sub-desc'><p>Function to call regardless of if the delete is successful or fails.</p>\n</div></li><li><span class='pre'>scope</span> : Object (optional)<div class='sub-desc'><p>The object to call the <code>success</code>, <code>error</code>, and <code>complete</code> callbacks in.</p>\n<p>Defaults to: <code>window</code></p></div></li></ul></div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>jqXHR</span><div class='sub-desc'><p>The jQuery XMLHttpRequest superset object for the request.</p>\n</div></li></ul><p>Overrides: <a href='#!/api/Kevlar.persistence.Proxy-method-destroy' rel='Kevlar.persistence.Proxy-method-destroy' class='docClass'>Kevlar.persistence.Proxy.destroy</a></p></div></div></div><div id='method-enableBubble' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Kevlar.util.Observable' rel='Kevlar.util.Observable' class='defined-in docClass'>Kevlar.util.Observable</a><br/><a href='source/Observable.html#Kevlar-util-Observable-method-enableBubble' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.util.Observable-method-enableBubble' class='name expandable'>enableBubble</a>( <span class='pre'>Array/String.../Object... events</span> )</div><div class='description'><div class='short'>Enables events fired by this Observable to bubble up an owner hierarchy by calling getBubbleTarget to determine\nthe o...</div><div class='long'><p>Enables events fired by this Observable to bubble up an owner hierarchy by calling <a href=\"#!/api/Kevlar.util.Observable-method-getBubbleTarget\" rel=\"Kevlar.util.Observable-method-getBubbleTarget\" class=\"docClass\">getBubbleTarget</a> to determine\nthe object's owner. The default implementation of <a href=\"#!/api/Kevlar.util.Observable-method-getBubbleTarget\" rel=\"Kevlar.util.Observable-method-getBubbleTarget\" class=\"docClass\">getBubbleTarget</a> in this class is just to return null, which specifies no owner.\nThis method should be overridden by subclasses to provide this if applicable.</p>\n\n\n<p>This is commonly used by ui.Components to bubble events to owner iu.Containers. \nSee ui.Component.getBubbleTarget. The default implementation in ui.Component returns the Component's immediate owner, \nbut if a known target is required, this can be overridden to access that target more quickly.</p>\n\n\n<p>Example:</p>\n\n\n<pre><code>MyClass = <a href=\"#!/api/Kevlar-property-extend\" rel=\"Kevlar-property-extend\" class=\"docClass\">Kevlar.extend</a>( <a href=\"#!/api/Kevlar.util.Observable\" rel=\"Kevlar.util.Observable\" class=\"docClass\">Kevlar.util.Observable</a>, {\n\n    constructor : function() {\n        ...\n        \n        this.addEvents( 'myBubbledEvent' );\n        this.enableBubble( 'myBubbledEvent' );  // enable the bubble\n    },\n\n\n    getBubbleTarget : function() {\n        // return a reference to some component that is the target for bubbling. this component may be listened to directly for the 'myBubbledEvent' event\n    }\n\n} );\n</code></pre>\n\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>events</span> : Array/String.../Object...<div class='sub-desc'><p>The event name to bubble, Array of event names, or one argument per event name. This may also\n  be an array of objects, where the objects have the following properties:<div class=\"mdetail-params\"><ul>\n   <li><b>eventName</b> : String<div class=\"sub-desc\">The name of the event to enable bubbling for.</div></li>\n  <li>\n <b>bubbleFn</b> : Function\n <div class=\"sub-desc\">\n   A function that determines, at every level in the hierarchy, if bubbling should continue. If this function returns false\n   at any point, the bubbling of the event is stopped. The function is given one argument: the Observable that the event\n   has just been fired for.  This function can be used to test for some condition, and then stop bubbling based on that condition.\n   </div>\n   </li>\n   <li>\n   <b>scope</b> : Object\n   <div class=\"sub-desc\">The scope to run the bubbleFn in. Defaults to the Observable that the event bubbling was enabled on.</div>\n   </li>\n</ul></div></p>\n</div></li></ul></div></div></div><div id='method-fireEvent' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Kevlar.util.Observable' rel='Kevlar.util.Observable' class='defined-in docClass'>Kevlar.util.Observable</a><br/><a href='source/Observable.html#Kevlar-util-Observable-method-fireEvent' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.util.Observable-method-fireEvent' class='name expandable'>fireEvent</a>( <span class='pre'>String eventName, Object... args</span> ) : Boolean</div><div class='description'><div class='short'>Fires the specified event with the passed parameters (minus the event name). ...</div><div class='long'><p>Fires the specified event with the passed parameters (minus the event name).</p>\n\n\n<p>An event may be set to bubble up an Observable parent hierarchy (See ui.Component.getBubbleTarget)\nby calling <a href=\"#!/api/Kevlar.util.Observable-method-enableBubble\" rel=\"Kevlar.util.Observable-method-enableBubble\" class=\"docClass\">enableBubble</a>.</p>\n\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>eventName</span> : String<div class='sub-desc'><p>The name of the event to fire.</p>\n</div></li><li><span class='pre'>args</span> : Object...<div class='sub-desc'><p>Variable number of parameters are passed to handlers.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>returns false if any of the handlers return false otherwise it returns true.</p>\n</div></li></ul></div></div></div><div id='method-getBubbleTarget' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Kevlar.util.Observable' rel='Kevlar.util.Observable' class='defined-in docClass'>Kevlar.util.Observable</a><br/><a href='source/Observable.html#Kevlar-util-Observable-method-getBubbleTarget' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.util.Observable-method-getBubbleTarget' class='name expandable'>getBubbleTarget</a>( <span class='pre'></span> ) : <a href=\"#!/api/Kevlar.util.Observable\" rel=\"Kevlar.util.Observable\" class=\"docClass\">Kevlar.util.Observable</a><strong class='protected signature'>protected</strong></div><div class='description'><div class='short'>Specifies the Observable that is the target of the event's bubbling, if bubbling is enabled for\nevents by the enableB...</div><div class='long'><p>Specifies the Observable that is the target of the event's bubbling, if bubbling is enabled for\nevents by the <a href=\"#!/api/Kevlar.util.Observable-method-enableBubble\" rel=\"Kevlar.util.Observable-method-enableBubble\" class=\"docClass\">enableBubble</a> method. This default implementation returns null, and should\nbe overridden by subclasses to specify their bubbling target.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Kevlar.util.Observable\" rel=\"Kevlar.util.Observable\" class=\"docClass\">Kevlar.util.Observable</a></span><div class='sub-desc'><p>The Observable that is the target for event bubbling, or null if none.</p>\n</div></li></ul></div></div></div><div id='method-getMethod' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.persistence.RestProxy'>Kevlar.persistence.RestProxy</span><br/><a href='source/RestProxy.html#Kevlar-persistence-RestProxy-method-getMethod' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.persistence.RestProxy-method-getMethod' class='name expandable'>getMethod</a>( <span class='pre'>String action</span> ) : String<strong class='protected signature'>protected</strong></div><div class='description'><div class='short'>Retrieves the HTTP method that should be used for a given action. ...</div><div class='long'><p>Retrieves the HTTP method that should be used for a given action. This is, by default, done via\na lookup to the <a href=\"#!/api/Kevlar.persistence.RestProxy-cfg-actionMethods\" rel=\"Kevlar.persistence.RestProxy-cfg-actionMethods\" class=\"docClass\">actionMethods</a> config object.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>action</span> : String<div class='sub-desc'><p>The action that is being taken. Should be 'create', 'read', 'update', or 'destroy'.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>The HTTP method that should be used.</p>\n</div></li></ul></div></div></div><div id='method-hasListener' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Kevlar.util.Observable' rel='Kevlar.util.Observable' class='defined-in docClass'>Kevlar.util.Observable</a><br/><a href='source/Observable.html#Kevlar-util-Observable-method-hasListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.util.Observable-method-hasListener' class='name expandable'>hasListener</a>( <span class='pre'>String eventName</span> ) : Boolean</div><div class='description'><div class='short'>Checks to see if this object has any listeners for a specified event ...</div><div class='long'><p>Checks to see if this object has any listeners for a specified event</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>eventName</span> : String<div class='sub-desc'><p>The name of the event to check for</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True if the event is being listened for, else false</p>\n</div></li></ul></div></div></div><div id='method-on' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Kevlar.util.Observable' rel='Kevlar.util.Observable' class='defined-in docClass'>Kevlar.util.Observable</a><br/><a href='source/Observable.html#Kevlar-util-Observable-method-on' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.util.Observable-method-on' class='name expandable'>on</a>( <span class='pre'>String eventName, Function handler, [Object scope], [Object options]</span> )</div><div class='description'><div class='short'>Appends an event handler to this object (shorthand for addListener.) ...</div><div class='long'><p>Appends an event handler to this object (shorthand for <a href=\"#!/api/Kevlar.util.Observable-method-addListener\" rel=\"Kevlar.util.Observable-method-addListener\" class=\"docClass\">addListener</a>.)</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>eventName</span> : String<div class='sub-desc'><p>The type of event to listen for</p>\n</div></li><li><span class='pre'>handler</span> : Function<div class='sub-desc'><p>The method the event invokes</p>\n</div></li><li><span class='pre'>scope</span> : Object (optional)<div class='sub-desc'><p>The scope (<code><b>this</b></code> reference) in which the handler function is executed.\n<b>If omitted, defaults to the object which fired the event.</b></p>\n</div></li><li><span class='pre'>options</span> : Object (optional)<div class='sub-desc'><p>An object containing handler configuration.</p>\n</div></li></ul></div></div></div><div id='method-purgeListeners' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Kevlar.util.Observable' rel='Kevlar.util.Observable' class='defined-in docClass'>Kevlar.util.Observable</a><br/><a href='source/Observable.html#Kevlar-util-Observable-method-purgeListeners' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.util.Observable-method-purgeListeners' class='name expandable'>purgeListeners</a>( <span class='pre'></span> )</div><div class='description'><div class='short'>Removes all listeners for this object ...</div><div class='long'><p>Removes all listeners for this object</p>\n</div></div></div><div id='method-read' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.persistence.RestProxy'>Kevlar.persistence.RestProxy</span><br/><a href='source/RestProxy.html#Kevlar-persistence-RestProxy-method-read' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.persistence.RestProxy-method-read' class='name expandable'>read</a>( <span class='pre'><a href=\"#!/api/Kevlar.Model\" rel=\"Kevlar.Model\" class=\"docClass\">Kevlar.Model</a> The, [Object options]</span> ) : jqXHR</div><div class='description'><div class='short'>Reads the Model from the server. ...</div><div class='long'><p>Reads the Model from the server.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>The</span> : <a href=\"#!/api/Kevlar.Model\" rel=\"Kevlar.Model\" class=\"docClass\">Kevlar.Model</a><div class='sub-desc'><p>Model instance to read from the server.</p>\n</div></li><li><span class='pre'>options</span> : Object (optional)<div class='sub-desc'><p>An object which may contain the following properties:</p>\n<ul><li><span class='pre'>async</span> : Boolean (optional)<div class='sub-desc'><p>True to make the request asynchronous, false to make it synchronous.</p>\n<p>Defaults to: <code>true</code></p></div></li><li><span class='pre'>success</span> : Function (optional)<div class='sub-desc'><p>Function to call if the delete is successful.</p>\n</div></li><li><span class='pre'>error</span> : Function (optional)<div class='sub-desc'><p>Function to call if the delete fails.</p>\n</div></li><li><span class='pre'>complete</span> : Function (optional)<div class='sub-desc'><p>Function to call regardless of if the delete is successful or fails.</p>\n</div></li><li><span class='pre'>scope</span> : Object (optional)<div class='sub-desc'><p>The object to call the <code>success</code>, <code>error</code>, and <code>complete</code> callbacks in.</p>\n<p>Defaults to: <code>window</code></p></div></li></ul></div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>jqXHR</span><div class='sub-desc'><p>The jQuery XMLHttpRequest superset object for the request.</p>\n</div></li></ul><p>Overrides: <a href='#!/api/Kevlar.persistence.Proxy-method-read' rel='Kevlar.persistence.Proxy-method-read' class='docClass'>Kevlar.persistence.Proxy.read</a></p></div></div></div><div id='method-relayEvents' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Kevlar.util.Observable' rel='Kevlar.util.Observable' class='defined-in docClass'>Kevlar.util.Observable</a><br/><a href='source/Observable.html#Kevlar-util-Observable-method-relayEvents' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.util.Observable-method-relayEvents' class='name expandable'>relayEvents</a>( <span class='pre'>Object o, Array events</span> )</div><div class='description'><div class='short'>Relays selected events from the specified Observable as if the events were fired by &lt;b&gt;this&lt;/b&gt;. ...</div><div class='long'><p>Relays selected events from the specified Observable as if the events were fired by <code>&lt;b&gt;this&lt;/b&gt;</code>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>o</span> : Object<div class='sub-desc'><p>The Observable whose events this object is to relay.</p>\n</div></li><li><span class='pre'>events</span> : Array<div class='sub-desc'><p>Array of event names to relay.</p>\n</div></li></ul></div></div></div><div id='method-removeListener' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Kevlar.util.Observable' rel='Kevlar.util.Observable' class='defined-in docClass'>Kevlar.util.Observable</a><br/><a href='source/Observable.html#Kevlar-util-Observable-method-removeListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.util.Observable-method-removeListener' class='name expandable'>removeListener</a>( <span class='pre'>String eventName, Function handler, [Object scope]</span> )</div><div class='description'><div class='short'>Removes an event handler. ...</div><div class='long'><p>Removes an event handler.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>eventName</span> : String<div class='sub-desc'><p>The type of event the handler was associated with.</p>\n</div></li><li><span class='pre'>handler</span> : Function<div class='sub-desc'><p>The handler to remove. <b>This must be a reference to the function passed into the <a href=\"#!/api/Kevlar.util.Observable-method-addListener\" rel=\"Kevlar.util.Observable-method-addListener\" class=\"docClass\">addListener</a> call.</b></p>\n</div></li><li><span class='pre'>scope</span> : Object (optional)<div class='sub-desc'><p>The scope originally specified for the handler.</p>\n</div></li></ul></div></div></div><div id='method-resumeEvents' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Kevlar.util.Observable' rel='Kevlar.util.Observable' class='defined-in docClass'>Kevlar.util.Observable</a><br/><a href='source/Observable.html#Kevlar-util-Observable-method-resumeEvents' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.util.Observable-method-resumeEvents' class='name expandable'>resumeEvents</a>( <span class='pre'></span> )</div><div class='description'><div class='short'>Resume firing events. ...</div><div class='long'><p>Resume firing events. (see <a href=\"#!/api/Kevlar.util.Observable-method-suspendEvents\" rel=\"Kevlar.util.Observable-method-suspendEvents\" class=\"docClass\">suspendEvents</a>)\nIf events were suspended using the <code>&lt;b&gt;queueSuspended&lt;/b&gt;</code> parameter, then all\nevents fired during event suspension will be sent to any listeners now.</p>\n</div></div></div><div id='method-setRootProperty' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.persistence.RestProxy'>Kevlar.persistence.RestProxy</span><br/><a href='source/RestProxy.html#Kevlar-persistence-RestProxy-method-setRootProperty' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.persistence.RestProxy-method-setRootProperty' class='name expandable'>setRootProperty</a>( <span class='pre'>String rootProperty</span> )</div><div class='description'><div class='short'>Accessor to set the rootProperty after instantiation. ...</div><div class='long'><p>Accessor to set the <a href=\"#!/api/Kevlar.persistence.RestProxy-cfg-rootProperty\" rel=\"Kevlar.persistence.RestProxy-cfg-rootProperty\" class=\"docClass\">rootProperty</a> after instantiation.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>rootProperty</span> : String<div class='sub-desc'><p>The new <a href=\"#!/api/Kevlar.persistence.RestProxy-cfg-rootProperty\" rel=\"Kevlar.persistence.RestProxy-cfg-rootProperty\" class=\"docClass\">rootProperty</a> value. This can be set to an empty string\n  to remove the <a href=\"#!/api/Kevlar.persistence.RestProxy-cfg-rootProperty\" rel=\"Kevlar.persistence.RestProxy-cfg-rootProperty\" class=\"docClass\">rootProperty</a>.</p>\n</div></li></ul></div></div></div><div id='method-suspendEvents' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Kevlar.util.Observable' rel='Kevlar.util.Observable' class='defined-in docClass'>Kevlar.util.Observable</a><br/><a href='source/Observable.html#Kevlar-util-Observable-method-suspendEvents' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.util.Observable-method-suspendEvents' class='name expandable'>suspendEvents</a>( <span class='pre'>Boolean queueSuspended</span> )</div><div class='description'><div class='short'>Suspend the firing of all events. ...</div><div class='long'><p>Suspend the firing of all events. (see <a href=\"#!/api/Kevlar.util.Observable-method-resumeEvents\" rel=\"Kevlar.util.Observable-method-resumeEvents\" class=\"docClass\">resumeEvents</a>)</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>queueSuspended</span> : Boolean<div class='sub-desc'><p>Pass as true to queue up suspended events to be fired\nafter the <a href=\"#!/api/Kevlar.util.Observable-method-resumeEvents\" rel=\"Kevlar.util.Observable-method-resumeEvents\" class=\"docClass\">resumeEvents</a> call instead of discarding all suspended events;</p>\n</div></li></ul></div></div></div><div id='method-trigger' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Kevlar.util.Observable' rel='Kevlar.util.Observable' class='defined-in docClass'>Kevlar.util.Observable</a><br/><a href='source/Observable.html#Kevlar-util-Observable-method-trigger' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.util.Observable-method-trigger' class='name expandable'>trigger</a>( <span class='pre'></span> )</div><div class='description'><div class='short'>Alias of fireEvent ...</div><div class='long'><p>Alias of <a href=\"#!/api/Kevlar.util.Observable-method-fireEvent\" rel=\"Kevlar.util.Observable-method-fireEvent\" class=\"docClass\">fireEvent</a></p>\n</div></div></div><div id='method-un' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Kevlar.util.Observable' rel='Kevlar.util.Observable' class='defined-in docClass'>Kevlar.util.Observable</a><br/><a href='source/Observable.html#Kevlar-util-Observable-method-un' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.util.Observable-method-un' class='name expandable'>un</a>( <span class='pre'>String eventName, Function handler, [Object scope]</span> )</div><div class='description'><div class='short'>Removes an event handler (shorthand for removeListener.) ...</div><div class='long'><p>Removes an event handler (shorthand for <a href=\"#!/api/Kevlar.util.Observable-method-removeListener\" rel=\"Kevlar.util.Observable-method-removeListener\" class=\"docClass\">removeListener</a>.)</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>eventName</span> : String<div class='sub-desc'><p>The type of event the handler was associated with.</p>\n</div></li><li><span class='pre'>handler</span> : Function<div class='sub-desc'><p>The handler to remove. <b>This must be a reference to the function passed into the <a href=\"#!/api/Kevlar.util.Observable-method-addListener\" rel=\"Kevlar.util.Observable-method-addListener\" class=\"docClass\">addListener</a> call.</b></p>\n</div></li><li><span class='pre'>scope</span> : Object (optional)<div class='sub-desc'><p>The scope originally specified for the handler.</p>\n</div></li></ul></div></div></div><div id='method-unbind' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Kevlar.util.Observable' rel='Kevlar.util.Observable' class='defined-in docClass'>Kevlar.util.Observable</a><br/><a href='source/Observable.html#Kevlar-util-Observable-method-unbind' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.util.Observable-method-unbind' class='name expandable'>unbind</a>( <span class='pre'>String eventName, Function handler, [Object scope]</span> )</div><div class='description'><div class='short'>Removes an event handler (shorthand for removeListener.) ...</div><div class='long'><p>Removes an event handler (shorthand for <a href=\"#!/api/Kevlar.util.Observable-method-removeListener\" rel=\"Kevlar.util.Observable-method-removeListener\" class=\"docClass\">removeListener</a>.)</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>eventName</span> : String<div class='sub-desc'><p>The type of event the handler was associated with.</p>\n</div></li><li><span class='pre'>handler</span> : Function<div class='sub-desc'><p>The handler to remove. <b>This must be a reference to the function passed into the <a href=\"#!/api/Kevlar.util.Observable-method-addListener\" rel=\"Kevlar.util.Observable-method-addListener\" class=\"docClass\">addListener</a> call.</b></p>\n</div></li><li><span class='pre'>scope</span> : Object (optional)<div class='sub-desc'><p>The scope originally specified for the handler.</p>\n</div></li></ul></div></div></div><div id='method-update' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Kevlar.persistence.RestProxy'>Kevlar.persistence.RestProxy</span><br/><a href='source/RestProxy.html#Kevlar-persistence-RestProxy-method-update' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Kevlar.persistence.RestProxy-method-update' class='name expandable'>update</a>( <span class='pre'><a href=\"#!/api/Kevlar.Model\" rel=\"Kevlar.Model\" class=\"docClass\">Kevlar.Model</a> model, [Object options]</span> ) : jqXHR</div><div class='description'><div class='short'>Updates the given Model on the server. ...</div><div class='long'><p>Updates the given Model on the server.  This method uses \"incremental\" updates, in which only the changed attributes of the <code>model</code>\nare persisted.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>model</span> : <a href=\"#!/api/Kevlar.Model\" rel=\"Kevlar.Model\" class=\"docClass\">Kevlar.Model</a><div class='sub-desc'><p>The model to persist to the server.</p>\n</div></li><li><span class='pre'>options</span> : Object (optional)<div class='sub-desc'><p>An object which may contain the following properties:</p>\n<ul><li><span class='pre'>async</span> : Boolean (optional)<div class='sub-desc'><p>True to make the request asynchronous, false to make it synchronous.</p>\n<p>Defaults to: <code>true</code></p></div></li><li><span class='pre'>success</span> : Function (optional)<div class='sub-desc'><p>Function to call if the update is successful.</p>\n</div></li><li><span class='pre'>error</span> : Function (optional)<div class='sub-desc'><p>Function to call if the update fails.</p>\n</div></li><li><span class='pre'>complete</span> : Function (optional)<div class='sub-desc'><p>Function to call regardless of if the update is successful or fails.</p>\n</div></li><li><span class='pre'>scope</span> : Object (optional)<div class='sub-desc'><p>The object to call the <code>success</code>, <code>error</code>, and <code>complete</code> callbacks in.\n  This may also be provided as <code>context</code> if you prefer.</p>\n<p>Defaults to: <code>window</code></p></div></li></ul></div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>jqXHR</span><div class='sub-desc'><p>The jQuery XMLHttpRequest superset object for the request, <em>or <code>null</code> if no request is made\n  because the model contained no changes</em>.</p>\n</div></li></ul><p>Overrides: <a href='#!/api/Kevlar.persistence.Proxy-method-update' rel='Kevlar.persistence.Proxy-method-update' class='docClass'>Kevlar.persistence.Proxy.update</a></p></div></div></div></div></div></div></div>","uses":[],"code_type":"assignment","inheritdoc":null,"superclasses":["Kevlar.util.Observable","Kevlar.persistence.Proxy","Kevlar.persistence.RestProxy"],"mixins":[],"members":{"property":[],"cfg":[{"owner":"Kevlar.persistence.RestProxy","meta":{},"name":"actionMethods","id":"cfg-actionMethods","tagname":"cfg"},{"owner":"Kevlar.persistence.RestProxy","meta":{},"name":"appendId","id":"cfg-appendId","tagname":"cfg"},{"owner":"Kevlar.persistence.RestProxy","meta":{},"name":"incremental","id":"cfg-incremental","tagname":"cfg"},{"owner":"Kevlar.util.Observable","meta":{},"name":"listeners","id":"cfg-listeners","tagname":"cfg"},{"owner":"Kevlar.persistence.RestProxy","meta":{},"name":"rootProperty","id":"cfg-rootProperty","tagname":"cfg"},{"owner":"Kevlar.persistence.RestProxy","meta":{},"name":"urlRoot","id":"cfg-urlRoot","tagname":"cfg"}],"css_var":[],"css_mixin":[],"event":[],"method":[{"owner":"Kevlar.persistence.RestProxy","meta":{},"name":"constructor","id":"method-constructor","tagname":"method"},{"owner":"Kevlar.util.Observable","meta":{},"name":"addEvents","id":"method-addEvents","tagname":"method"},{"owner":"Kevlar.util.Observable","meta":{},"name":"addListener","id":"method-addListener","tagname":"method"},{"owner":"Kevlar.util.Observable","meta":{},"name":"bind","id":"method-bind","tagname":"method"},{"owner":"Kevlar.persistence.RestProxy","meta":{"protected":true},"name":"buildUrl","id":"method-buildUrl","tagname":"method"},{"owner":"Kevlar.persistence.RestProxy","meta":{},"name":"create","id":"method-create","tagname":"method"},{"owner":"Kevlar.persistence.RestProxy","meta":{},"name":"destroy","id":"method-destroy","tagname":"method"},{"owner":"Kevlar.util.Observable","meta":{},"name":"enableBubble","id":"method-enableBubble","tagname":"method"},{"owner":"Kevlar.util.Observable","meta":{},"name":"fireEvent","id":"method-fireEvent","tagname":"method"},{"owner":"Kevlar.util.Observable","meta":{"protected":true},"name":"getBubbleTarget","id":"method-getBubbleTarget","tagname":"method"},{"owner":"Kevlar.persistence.RestProxy","meta":{"protected":true},"name":"getMethod","id":"method-getMethod","tagname":"method"},{"owner":"Kevlar.util.Observable","meta":{},"name":"hasListener","id":"method-hasListener","tagname":"method"},{"owner":"Kevlar.util.Observable","meta":{},"name":"on","id":"method-on","tagname":"method"},{"owner":"Kevlar.util.Observable","meta":{},"name":"purgeListeners","id":"method-purgeListeners","tagname":"method"},{"owner":"Kevlar.persistence.RestProxy","meta":{},"name":"read","id":"method-read","tagname":"method"},{"owner":"Kevlar.util.Observable","meta":{},"name":"relayEvents","id":"method-relayEvents","tagname":"method"},{"owner":"Kevlar.util.Observable","meta":{},"name":"removeListener","id":"method-removeListener","tagname":"method"},{"owner":"Kevlar.util.Observable","meta":{},"name":"resumeEvents","id":"method-resumeEvents","tagname":"method"},{"owner":"Kevlar.persistence.RestProxy","meta":{},"name":"setRootProperty","id":"method-setRootProperty","tagname":"method"},{"owner":"Kevlar.util.Observable","meta":{},"name":"suspendEvents","id":"method-suspendEvents","tagname":"method"},{"owner":"Kevlar.util.Observable","meta":{},"name":"trigger","id":"method-trigger","tagname":"method"},{"owner":"Kevlar.util.Observable","meta":{},"name":"un","id":"method-un","tagname":"method"},{"owner":"Kevlar.util.Observable","meta":{},"name":"unbind","id":"method-unbind","tagname":"method"},{"owner":"Kevlar.persistence.RestProxy","meta":{},"name":"update","id":"method-update","tagname":"method"}]},"component":false,"meta":{},"private":false,"mixedInto":[],"name":"Kevlar.persistence.RestProxy","alternateClassNames":[],"aliases":{},"html_meta":{},"tagname":"class","extends":"Kevlar.persistence.Proxy","requires":[],"id":"class-Kevlar.persistence.RestProxy","allMixins":[],"subclasses":[],"inheritable":false});