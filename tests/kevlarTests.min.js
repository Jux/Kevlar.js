/*!
 * Kevlar JS Library
 * Copyright(c) 2011 Gregory Jacobs.
 * MIT Licensed. http://www.opensource.org/licenses/mit-license.php
 */
describe("Kevlar",function(){describe("Yee haw",function(){it("test_hi",function(){})});describe("Test apply()",function(){it("test_zomgzor",function(){});it("test_apply",function(){var f=Kevlar.apply({},{foo:1,bar:2});Y.ObjectAssert.hasKeys(f,{foo:1,bar:2},"Test simple apply, with a return value");var e={};Kevlar.apply(e,{opt1:"x",opt2:"y"});Y.ObjectAssert.hasKeys(e,{opt1:"x",opt2:"y"},"Test that the reference is changed");var d=Kevlar.apply({},{prop1:1});expect(d.prop2).toBeUndefined();var c=Kevlar.apply({foo:1,baz:4},{foo:2,bar:3});Y.ObjectAssert.hasKeys(c,{foo:2,bar:3,baz:4},"Ensure that properties get overwritten by defaults");var b={};Kevlar.apply(b,{foo:"new",exist:true},{foo:"old",def:true});Y.ObjectAssert.hasKeys(b,{foo:"new",def:true,exist:true},"Test using defaults");var a=Kevlar.apply({},{foo:"foo",bar:"bar"},{foo:"oldFoo",bar:"oldBar"});Y.ObjectAssert.hasKeys(a,{foo:"foo",bar:"bar"},"Test to ensure all defaults get overridden");Y.Assert.isNull(Kevlar.apply(null,{}),"Test null first argument")})});describe("Test applyIf()",function(){it("test_applyIf",function(){var d=Kevlar.applyIf({},{foo:"foo",bar:"bar"});Y.ObjectAssert.hasKeys(d,{foo:"foo",bar:"bar"},"Test with an empty destination object");var c=Kevlar.applyIf({foo:"foo"},{foo:"oldFoo"});Y.ObjectAssert.hasKeys(c,{foo:"foo"},"Ensure existing properties don't get overridden");var b=Kevlar.applyIf({foo:1,bar:2},{bar:3,baz:4});Y.ObjectAssert.hasKeys(b,{foo:1,bar:2,baz:4},"Test mixing properties to be overridden");var a={};Kevlar.applyIf(a,{foo:2},{foo:1});Y.ObjectAssert.hasKeys(a,{foo:2},"Test that the reference of the object is changed");Y.Assert.isNull(Kevlar.applyIf(null,{}),"Test null first argument")})});describe("Test each()",function(){it("test_each",function(){var d=0;Kevlar.each([1,2,3,4],function(f){d+=f});expect(d).toEqual(10);var c="";Kevlar.each(["T","e","s","t","i","n","g"],function(f){c+=f});expect(c).toEqual("Testing");d=0;Kevlar.each(5,function(f){d+=f});expect(d).toEqual(5);var e=false;Kevlar.each([],function(){e=true});expect(e).toEqual(false);e=false;Kevlar.each(null,function(){e=true});expect(e).toEqual(false);e=false;Kevlar.each(document.getElementsByTagName("body"),function(){e=true});expect(e).toEqual(true);var a=[];Kevlar.each([1,2,3,4,5,6],function(g,f){a.push(f)});Y.ArrayAssert.itemsAreEqual([0,1,2,3,4,5],a,"Test index is passed correctly");d=0;Kevlar.each([1,2,3,4,5,6],function(f){if(f>4){return false}d+=f});expect(d).toEqual(10);d=0;var b={value:3};Kevlar.each([1,2,3],function(f){d+=f*this.value},b);expect(d).toEqual(18);d=0;b={value:5};Kevlar.each([1,2,3],function(f){d+=f*this.value},b);expect(d).toEqual(30)})});describe("Test isArray()",function(){it("test_isArray",function(){var a=Kevlar.extend(Object,{length:1});expect(Kevlar.isArray([])).toEqual(true);expect(Kevlar.isArray([1,2,3,4])).toEqual(true);expect(Kevlar.isArray(false)).toEqual(false);expect(Kevlar.isArray(true)).toEqual(false);expect(Kevlar.isArray("foo")).toEqual(false);expect(Kevlar.isArray(1)).toEqual(false);expect(Kevlar.isArray(null)).toEqual(false);expect(Kevlar.isArray(new Date())).toEqual(false);expect(Kevlar.isArray({})).toEqual(false);expect(Kevlar.isArray(document.getElementsByTagName("body"))).toEqual(false);expect(Kevlar.isArray(jQuery("body")[0])).toEqual(false);expect(Kevlar.isArray(new a())).toEqual(false)})});describe("Test isBoolean()",function(){it("test_isBoolean",function(){expect(Kevlar.isBoolean(true)).toEqual(true);expect(Kevlar.isBoolean(false)).toEqual(true);expect(Kevlar.isBoolean([])).toEqual(false);expect(Kevlar.isBoolean([1,2,3])).toEqual(false);expect(Kevlar.isBoolean(1)).toEqual(false);expect(Kevlar.isBoolean("")).toEqual(false);expect(Kevlar.isBoolean("foo")).toEqual(false);expect(Kevlar.isBoolean(jQuery("body")[0])).toEqual(false);expect(Kevlar.isBoolean(null)).toEqual(false);expect(Kevlar.isBoolean({})).toEqual(false);expect(Kevlar.isBoolean(new Date())).toEqual(false)})});describe("Test isDate()",function(){it("test_isDate",function(){expect(Kevlar.isDate(new Date())).toEqual(true);expect(Kevlar.isDate(Date.parseDate("2000","Y"))).toEqual(true);expect(Kevlar.isDate(true)).toEqual(false);expect(Kevlar.isDate(1)).toEqual(false);expect(Kevlar.isDate("foo")).toEqual(false);expect(Kevlar.isDate(null)).toEqual(false);expect(Kevlar.isDate([])).toEqual(false);expect(Kevlar.isDate({})).toEqual(false);expect(Kevlar.isDate(jQuery("body")[0])).toEqual(false)})});describe("Test isDefined()",function(){it("test_isDefined",function(){expect(Kevlar.isDefined(undefined)).toEqual(false);expect(Kevlar.isDefined(null)).toEqual(true);expect(Kevlar.isDefined({})).toEqual(true);expect(Kevlar.isDefined([])).toEqual(true);expect(Kevlar.isDefined(new Date())).toEqual(true);expect(Kevlar.isDefined(1)).toEqual(true);expect(Kevlar.isDefined(false)).toEqual(true);expect(Kevlar.isDefined("")).toEqual(true);expect(Kevlar.isDefined("foo")).toEqual(true);expect(Kevlar.isDefined(jQuery("body")[0])).toEqual(true)})});describe("Test isElement()",function(){it("test_isElement",function(){expect(Kevlar.isElement(jQuery("body")[0])).toEqual(true);expect(Kevlar.isElement(null)).toEqual(false);expect(Kevlar.isElement(1)).toEqual(false);expect(Kevlar.isElement("foo")).toEqual(false)})});describe("Test isJQuery()",function(){it("test_isJQuery",function(){expect(Kevlar.isJQuery(jQuery("body")[0])).toEqual(false);expect(Kevlar.isJQuery(undefined)).toEqual(false);expect(Kevlar.isJQuery(null)).toEqual(false);expect(Kevlar.isJQuery(1)).toEqual(false);expect(Kevlar.isJQuery("foo")).toEqual(false);expect(Kevlar.isJQuery(false)).toEqual(false);expect(Kevlar.isJQuery({})).toEqual(false);expect(Kevlar.isJQuery(Kevlar.emptyFn)).toEqual(false);expect(Kevlar.isJQuery([])).toEqual(false);expect(Kevlar.isJQuery(jQuery("body"))).toEqual(true);expect(Kevlar.isJQuery(jQuery("#non-existent-element"))).toEqual(true)})});describe("Test isFunction()",function(){it("test_isFunction",function(){var b=new Kevlar.util.Observable(),a={fn:function(){}};expect(Kevlar.isFunction(function(){})).toEqual(true);expect(Kevlar.isFunction(new Function('return "";'))).toEqual(true);expect(Kevlar.isFunction(Kevlar.emptyFn)).toEqual(true);expect(Kevlar.isFunction(b.fireEvent)).toEqual(true);expect(Kevlar.isFunction(a.fn)).toEqual(true);expect(Kevlar.isFunction(Kevlar.version)).toEqual(false);expect(Kevlar.isFunction(null)).toEqual(false);expect(Kevlar.isFunction(1)).toEqual(false);expect(Kevlar.isFunction("")).toEqual(false);expect(Kevlar.isFunction(new Date())).toEqual(false);expect(Kevlar.isFunction([])).toEqual(false);expect(Kevlar.isFunction({})).toEqual(false)})});describe("Test isNumber()",function(){it("test_isNumber",function(){expect(Kevlar.isNumber(0)).toEqual(true);expect(Kevlar.isNumber(4)).toEqual(true);expect(Kevlar.isNumber(-3)).toEqual(true);expect(Kevlar.isNumber(7.9)).toEqual(true);expect(Kevlar.isNumber(-4.3)).toEqual(true);expect(Kevlar.isNumber(Number.MAX_VALUE)).toEqual(true);expect(Kevlar.isNumber(Number.MIN_VALUE)).toEqual(true);expect(Kevlar.isNumber(Math.PI)).toEqual(true);expect(Kevlar.isNumber(Number("3.1"))).toEqual(true);expect(Kevlar.isNumber(Number.NaN)).toEqual(false);expect(Kevlar.isNumber(Number.POSITIVE_INFINITY)).toEqual(false);expect(Kevlar.isNumber(Number.NEGATIVE_INFINITY)).toEqual(false);expect(Kevlar.isNumber(true)).toEqual(false);expect(Kevlar.isNumber("")).toEqual(false);expect(Kevlar.isNumber("1.0")).toEqual(false);expect(Kevlar.isNumber(null)).toEqual(false);expect(Kevlar.isNumber(undefined)).toEqual(false);expect(Kevlar.isNumber([])).toEqual(false);expect(Kevlar.isNumber({})).toEqual(false)})});describe("Test isObject()",function(){it("test_isObject",function(){expect(Kevlar.isObject({})).toEqual(true);expect(Kevlar.isObject({foo:1})).toEqual(true);expect(Kevlar.isObject(new Kevlar.util.Observable())).toEqual(true);expect(Kevlar.isObject(new Object())).toEqual(true);expect(Kevlar.isObject(new Date())).toEqual(false);expect(Kevlar.isObject([])).toEqual(false);expect(Kevlar.isObject(new Array())).toEqual(false);expect(Kevlar.isObject(1)).toEqual(false);expect(Kevlar.isObject("foo")).toEqual(false);expect(Kevlar.isObject(false)).toEqual(false);expect(Kevlar.isObject(new Number(3))).toEqual(false);expect(Kevlar.isObject(new String("foo"))).toEqual(false);expect(Kevlar.isObject(null)).toEqual(false);expect(Kevlar.isObject(undefined)).toEqual(false)})});describe("Test isPrimitive()",function(){it("test_isPrimitive",function(){expect(Kevlar.isPrimitive(1)).toEqual(true);expect(Kevlar.isPrimitive(-3)).toEqual(true);expect(Kevlar.isPrimitive(1.4)).toEqual(true);expect(Kevlar.isPrimitive(Number.MAX_VALUE)).toEqual(true);expect(Kevlar.isPrimitive(Math.PI)).toEqual(true);expect(Kevlar.isPrimitive("")).toEqual(true);expect(Kevlar.isPrimitive("foo")).toEqual(true);expect(Kevlar.isPrimitive(true)).toEqual(true);expect(Kevlar.isPrimitive(false)).toEqual(true);expect(Kevlar.isPrimitive(null)).toEqual(false);expect(Kevlar.isPrimitive(undefined)).toEqual(false);expect(Kevlar.isPrimitive({})).toEqual(false);expect(Kevlar.isPrimitive([])).toEqual(false);expect(Kevlar.isPrimitive(new Kevlar.util.Observable())).toEqual(false)})});describe("Test isString()",function(){it("test_isString",function(){var a=new String("foo");expect(Kevlar.isString("")).toEqual(true);expect(Kevlar.isString("foo")).toEqual(true);expect(Kevlar.isString(String(""))).toEqual(true);expect(Kevlar.isString(new String(""))).toEqual(false);expect(Kevlar.isString(1)).toEqual(false);expect(Kevlar.isString(true)).toEqual(false);expect(Kevlar.isString(null)).toEqual(false);expect(Kevlar.isString(undefined)).toEqual(false);expect(Kevlar.isString([])).toEqual(false);expect(Kevlar.isString({})).toEqual(false)})});describe("Test namespace()",function(){it("test_namespace",function(){var a=window;Kevlar.namespace("FooTest1");expect(a.FooTest1).toBeUndefined();Kevlar.namespace("FooTest2","FooTest3","FooTest4");expect(a.FooTest2).toBeUndefined();expect(a.FooTest3).toBeUndefined();expect(a.FooTest4).toBeUndefined();Kevlar.namespace("FooTest5","FooTest5.ns1","FooTest5.ns1.ns2","FooTest5.ns1.ns2.ns3");expect(a.FooTest5).toBeUndefined();expect(a.FooTest5.ns1).toBeUndefined();expect(a.FooTest5.ns1.ns2).toBeUndefined();expect(a.FooTest5.ns1.ns2.ns3).toBeUndefined();Kevlar.namespace("FooTest6.ns1","FooTest7.ns1");expect(a.FooTest6.ns1).toBeUndefined();expect(a.FooTest7.ns1).toBeUndefined();Kevlar.namespace("FooTest8","FooTest8.ns1.ns2");expect(a.FooTest8).toBeUndefined();expect(a.FooTest8.ns1).toBeUndefined();expect(a.FooTest8.ns1.ns2).toBeUndefined();FooTest8.prop1="foo";Kevlar.namespace("FooTest8");expect(FooTest8.prop1).toEqual("foo")})});describe("Test toArray()",function(){it("test_toArray",function(){Y.Assert.isArray(Kevlar.toArray(document.getElementsByTagName("body")),"Test with node list")})});describe("Test extend()",function(){it("extend() should set up simple prototype-chaining inheritance",function(){var c=Kevlar.extend(Object,{constructor:function(d){Kevlar.apply(this,d);this.isBadass=false}});var b=Kevlar.extend(c,{constructor:function(){b.superclass.constructor.apply(this,arguments);this.isBadass=true}});var a=new b({davis:"isAwesome"});expect(a.davis).toEqual("isAwesome");expect(a.isBadass).toEqual(true);Y.Assert.isFunction(a.override,"Test if extend added the override method");Y.ObjectAssert.areEqual({isBadass:true,davis:"isAwesome"},a,"Test if David is badass and awesome")});it("extend() should add static 'constructor' property to the class (constructor function)",function(){var a=Kevlar.extend(Object,{});expect(a).toBe(a.constructor)});it("extend() should add static 'constructor' property to a subclass (constructor function)",function(){var a=Kevlar.extend(Object,{});var b=Kevlar.extend(a,{});expect(b).toBe(b.constructor)});it("extend() should add static 'superclass' property to a subclass (constructor function) that refers to its superclass prototype",function(){var a=Kevlar.extend(Object,{});var b=Kevlar.extend(a,{});expect(a.prototype).toBe(b.superclass)});it("extend() should be able to add in a single mixin class into another class",function(){var d=false;var c=Kevlar.extend(Object,{mixinFn:function(){d=true}});var b=Kevlar.extend(Object,[c],{});var a=new b();a.mixinFn();expect(d).toEqual(true)});it("extend() should not overwrite a class's methods/properties with a mixin's methods/properties",function(){var c=null;var d=Kevlar.extend(Object,{testProp:"Mixin defined",testMethod:function(){c="Mixin defined"}});var b=Kevlar.extend(Object,[d],{testProp:"MyClass defined",testMethod:function(){c="MyClass defined"}});var a=new b();expect(a.testProp).toBe("MyClass defined");a.testMethod();expect(c).toBe("MyClass defined")});it("extend() should have later-defined mixins take precedence over earlier-defined mixins",function(){var b=Kevlar.extend(Object,{testProp:"Mixin1 defined"});var d=Kevlar.extend(Object,{testProp:"Mixin2 defined"});var c=Kevlar.extend(Object,[b,d],{});var a=new c();expect(a.testProp).toBe("Mixin2 defined")});it("extend() should have set up the hasMixin() method, which should check the class for a given mixin",function(){var c=Kevlar.extend(Object,{});var b=Kevlar.extend(Object,{});var a=Kevlar.extend(Object,[c],{});expect(a.hasMixin(c)).toEqual(true);expect(a.hasMixin(b)).toEqual(false)});it("extend() should have set up the hasMixin() method, which should check the class and all of its superclasses for a given mixin",function(){var f=Kevlar.extend(Object,{});var d=Kevlar.extend(Object,{});var e=Kevlar.extend(Object,{});var h=Kevlar.extend(Object,{});var b=Kevlar.extend(Object,[f],{});var a=Kevlar.extend(b,[d],{});var j=Kevlar.extend(a,[e],{});for(var c=0;c<=1;c++){var g=(c===0)?"initial":"cached";expect(j.hasMixin(f)).toEqual(true);expect(j.hasMixin(d)).toEqual(true);expect(j.hasMixin(e)).toEqual(true);expect(j.hasMixin(h)).toEqual(false)}});it("extend() should have set up the hasMixin() method, which should work with mixins and classes defined by regular functions (not using extend())",function(){var g=function(){};var d=function(){};var h=function(){};var b=function(){};var f=Kevlar.extend(b,[g],{});var a=Kevlar.extend(f,[d],{});for(var c=0;c<=1;c++){var e=(c===0)?"initial":"cached";expect(a.hasMixin(g)).toEqual(true);expect(a.hasMixin(d)).toEqual(true);expect(a.hasMixin(h)).toEqual(false)}});it("extend() should have set up the hasMixin() method on the subclass's prototype, which should work as the static one on an instance's class",function(){var f=Kevlar.extend(Object,{});var d=Kevlar.extend(Object,{});var e=Kevlar.extend(Object,{});var j=Kevlar.extend(Object,{});var b=Kevlar.extend(Object,[f],{});var a=Kevlar.extend(b,[d],{});var k=Kevlar.extend(a,[e],{});var h=new k();for(var c=0;c<=1;c++){var g=(c===0)?"initial":"cached";expect(h.hasMixin(f)).toEqual(true);expect(h.hasMixin(d)).toEqual(true);expect(h.hasMixin(e)).toEqual(true);expect(h.hasMixin(j)).toEqual(false)}})});describe("Test isInstanceOf()",function(){it("isInstanceOf() should return false for any primitive type",function(){expect(Kevlar.isInstanceOf(undefined,Object)).toEqual(false);expect(Kevlar.isInstanceOf(null,Object)).toEqual(false);expect(Kevlar.isInstanceOf(1,Object)).toEqual(false);expect(Kevlar.isInstanceOf("hi",Object)).toEqual(false);expect(Kevlar.isInstanceOf(true,Object)).toEqual(false)});it("isInstanceOf() should return true when testing an anonymous object with the Object constructor",function(){expect(Kevlar.isInstanceOf({},Object)).toEqual(true)});it("isInstanceOf() should return true when testing an object of a class",function(){var a=Kevlar.extend(Object,{constructor:function(){}});var b=new a();expect(Kevlar.isInstanceOf(b,a)).toEqual(true)});it("isInstanceOf() should return true when testing an object that is a subclass of a given class",function(){var a=Kevlar.extend(Object,{constructor:function(){}});var c=Kevlar.extend(a,{constructor:function(){}});var b=new c();expect(Kevlar.isInstanceOf(b,a)).toEqual(true)});it("isInstanceOf() should return false when testing an object that is not an instance of a given class",function(){var a=Kevlar.extend(Object,{constructor:function(){}});var c=Kevlar.extend(Object,{constructor:function(){}});var b=new c();expect(Kevlar.isInstanceOf(b,a)).toEqual(false)});it("isInstanceOf() should return true when testing an object that has a given mixin class",function(){var c=Kevlar.extend(Object,{constructor:function(){}});var a=Kevlar.extend(Object,[c],{constructor:function(){}});var b=new a();expect(Kevlar.isInstanceOf(b,c)).toEqual(true)});it("isInstanceOf() should return true when testing an object that has a given mixin class implemented in its superclass",function(){var d=Kevlar.extend(Object,{constructor:function(){}});var a=Kevlar.extend(Object,[d],{constructor:function(){}});var c=Kevlar.extend(a,{constructor:function(){}});var b=new c();expect(Kevlar.isInstanceOf(b,d)).toEqual(true)});it("isInstanceOf() should return true when testing an object that has a given mixin class implemented in its superclass's superclass",function(){var e=Kevlar.extend(Object,{constructor:function(){}});var a=Kevlar.extend(Object,[e],{constructor:function(){}});var d=Kevlar.extend(a,{constructor:function(){}});var c=Kevlar.extend(d,{constructor:function(){}});var b=new c();expect(Kevlar.isInstanceOf(b,e)).toEqual(true)})})});